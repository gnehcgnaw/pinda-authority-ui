{"remainingRequest":"D:\\projects\\beike\\pinda-authority-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\projects\\beike\\pinda-authority-ui\\src\\components\\pinda\\fileUpload.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\projects\\beike\\pinda-authority-ui\\src\\components\\pinda\\fileUpload.vue","mtime":1585207882694},{"path":"D:\\projects\\beike\\pinda-authority-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\projects\\beike\\pinda-authority-ui\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\projects\\beike\\pinda-authority-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\projects\\beike\\pinda-authority-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport db from '@/utils/localstorage'\r\nimport commonApi from '@/api/Common.js'\r\nexport default {\r\n  name: 'FileUpload',\r\n  props: {\r\n    uploadRef: {\r\n      type: String,\r\n      default: 'file1'\r\n    },\r\n    // 是否多选\r\n    multiple: {\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n    // 是否自动上传\r\n    autoUpload: {\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n    // 是否上传文件\r\n    isUpload: {\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n    // 最大允许上传个数\r\n    limit: {\r\n      type: Number,\r\n      default: null\r\n    },\r\n    // 允许上传的文件类型\r\n    accept: {\r\n      type: String,\r\n      default: ''\r\n    },\r\n    // 允许上传的文件大小 单位：字节\r\n    acceptSize: {\r\n      type: Number,\r\n      default: null\r\n    },\r\n    // 默认额外上传数据\r\n    fileOtherData: {\r\n      type: Object,\r\n      default: function() {\r\n        return {\r\n          id: null,\r\n          bizId: '',\r\n          bizType: '',\r\n          isSingle: false\r\n        }\r\n      }\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      // 默认附件列表\r\n      fileList: [],\r\n      // 删除附件列表\r\n      removeFileAry: [],\r\n      // 新增附件列表\r\n      addFileAry: [],\r\n      // 上传成功的文件数\r\n      successNum: 0,\r\n      // 上传失败的文件数\r\n      errorNum: 0,\r\n      // 已上传的文件数\r\n      uploadTotalNum: 0,\r\n      // 是否上传失败\r\n      isUploadError: false,\r\n      action: `${process.env.VUE_APP_BASE_API}/file/attachment/upload`\r\n    }\r\n  },\r\n  computed: {\r\n    headers() {\r\n      return {\r\n        token: db.get('TOKEN', '') || '',\r\n        tenant: db.get('TENANT', '') || ''\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    // 附件初始化\r\n    init({ id, bizId, bizType, isSingle, isDetail }) {\r\n      const vm = this\r\n      //debugger;\r\n      vm.fileOtherData.bizId = bizId\r\n      vm.fileOtherData.id = id || ''\r\n      vm.fileOtherData.bizType = bizType\r\n      vm.fileOtherData.isSingle = isSingle || false\r\n      vm.fileList.length = 0\r\n      vm.removeFileAry = []\r\n      vm.addFileAry = []\r\n      vm.$emit('fileLengthVaild', 0)\r\n      if (isDetail) {\r\n        vm.getAttachment()\r\n      }\r\n      vm.successNum = 0\r\n      vm.errorNum = 0\r\n      vm.uploadTotalNum = 0\r\n      vm.$refs[vm.uploadRef].clearFiles()\r\n    },\r\n\r\n    handleChange(file, fileList) {\r\n      //debugger;\r\n      const vm = this\r\n      if (file.response) {\r\n        vm.uploadTotalNum += 1\r\n        if (file.response.isSuccess) {\r\n          vm.fileOtherData.bizId = file.response.data.bizId\r\n          vm.successNum += 1\r\n        } else {\r\n          setTimeout(() => {\r\n            vm.$message({\r\n              message: file.name + '上传失败，原因：\\n' + file.response.msg,\r\n              type: 'error',\r\n              showClose: true,\r\n              duration: 6000\r\n            })\r\n          }, 0)\r\n          vm.isUploadError = false\r\n          vm.errorNum += 1\r\n        }\r\n        vm.$emit('setId', vm.uploadTotalNum === fileList.length, file.response)\r\n      } else {\r\n        if (vm.acceptSize) {\r\n          const isLtAcceptSize = file.size > vm.acceptSize\r\n\r\n          if (isLtAcceptSize) {\r\n            setTimeout(() => {\r\n              vm.$message.error(\r\n                '只能上传' +\r\n                  vm.renderSize(vm.acceptSize) +\r\n                  '的文件!已为您过滤文件：' +\r\n                  file.name\r\n              )\r\n            }, 10)\r\n\r\n            fileList.forEach((item, index) => {\r\n              if (item.uid === file.uid) {\r\n                fileList.splice(index, 1)\r\n              }\r\n            })\r\n          } else {\r\n            if (!vm.isUploadError) {\r\n              vm.addFileAry.push(file.name)\r\n            }\r\n            vm.isUploadError = false\r\n          }\r\n        } else {\r\n          if (!vm.isUploadError) {\r\n            vm.addFileAry.push(file.name)\r\n          }\r\n          vm.isUploadError = false\r\n        }\r\n        vm.$emit('fileLengthVaild', vm.fileList.length + vm.addFileAry.length)\r\n      }\r\n      vm.$store.state.hasLoading = false\r\n    },\r\n    // 附件上传失败\r\n    handleError() {\r\n      const vm = this\r\n      vm.$message.error('附件上传失败，请重试')\r\n      vm.isUploadError = true\r\n      vm.$store.state.hasLoading = false\r\n    },\r\n    renderSize(value) {\r\n      if (null == value || value == '') {\r\n        return '0 B'\r\n      }\r\n      const unitArr = new Array(\r\n        'B',\r\n        'KB',\r\n        'MB',\r\n        'GB',\r\n        'TB',\r\n        'PB',\r\n        'EB',\r\n        'ZB',\r\n        'YB'\r\n      )\r\n      let index = 0\r\n      let srcsize = parseFloat(value)\r\n      index = Math.floor(Math.log(srcsize) / Math.log(1024))\r\n      let size = srcsize / Math.pow(1024, index)\r\n      size = size.toFixed(2)\r\n      if (unitArr[index]) {\r\n        return size + unitArr[index]\r\n      }\r\n      return '文件太大'\r\n    },\r\n    handlePreview(file) {\r\n      if (file.bizId) {\r\n        this.downLoadFile(file)\r\n      }\r\n    },\r\n    beforeRemove(file) {\r\n      return this.$confirm('确定移除' + file.name, '删除确认')\r\n    },\r\n    // 文件超出个数限制时的钩子\r\n    handleExceed() {\r\n      const vm = this\r\n      vm.$message('当前最多允许上传' + vm.limit + '个文件')\r\n    },\r\n    // 删除附件列表\r\n    handleRemove(file) {\r\n      //debugger;\r\n      const vm = this\r\n      if (file.bizId) {\r\n        vm.removeFileAry.push(file.id)\r\n        vm.fileList.map((item, index) => {\r\n          if (item.name === file.name) {\r\n            vm.fileList.splice(index, 1)\r\n            return false\r\n          }\r\n        })\r\n      } else {\r\n        vm.addFileAry.map((item, index) => {\r\n          if (item === file.name) {\r\n            vm.addFileAry.splice(index, 1)\r\n            return false\r\n          }\r\n        })\r\n      }\r\n      vm.$emit('fileLengthVaild', vm.fileList.length + vm.addFileAry.length)\r\n    },\r\n    // 服务器删除附件\r\n    async deleteAttachment() {\r\n      const vm = this\r\n      const res = await commonApi.deleteAttachment({\r\n        ids: vm.removeFileAry\r\n      })\r\n      if (res.status === 200) {\r\n        if (res.data.code !== 0) {\r\n          vm.$message(res.data.msg)\r\n        } else {\r\n          vm.removeFileAry = []\r\n        }\r\n      }\r\n    },\r\n    // 查询附件\r\n    async getAttachment() {\r\n      const vm = this\r\n      const res = await commonApi.getAttachment({\r\n        bizIds: vm.fileOtherData.bizId,\r\n        bizTypes: vm.fileOtherData.bizType\r\n      })\r\n      if (res.status === 200) {\r\n        if (res.data.code === 0) {\r\n          if (res.data.data.length > 0) {\r\n            let data = res.data.data[0].list\r\n            data.map(item => {\r\n              item.name = item.submittedFileName\r\n            })\r\n            vm.fileList = data\r\n            vm.$emit('fileLengthVaild', vm.fileList.length)\r\n          }\r\n        }\r\n      }\r\n    },\r\n    // 查询附件\r\n    async getAttachmentByArr(bizIds, bizTypes) {\r\n      const vm = this\r\n      const res = await commonApi.getAttachment({\r\n        bizIds: bizIds,\r\n        bizTypes: bizTypes\r\n      })\r\n      if (res.status === 200) {\r\n        if (res.data.code === 0) {\r\n          if (res.data.data.length > 0) {\r\n            let data = res.data.data[0].list\r\n            data.map(item => {\r\n              item.name = item.submittedFileName\r\n            })\r\n            vm.fileList = data\r\n          }\r\n        }\r\n      }\r\n    },\r\n    // 返回附件新增及删除数组长度\r\n    handleBack() {\r\n      const vm = this\r\n      return {\r\n        addLength: vm.addFileAry.length,\r\n        removeLength: vm.removeFileAry.length\r\n      }\r\n    },\r\n    // 附件上传服务器触发方法\r\n    submitFile(id, bizId, bizType) {\r\n      //debugger;\r\n      const vm = this\r\n      vm.fileOtherData.id = id\r\n      if (bizId) {\r\n        vm.fileOtherData.bizId = bizId\r\n        vm.isUpload = true\r\n      }\r\n      vm.fileOtherData.bizType = bizType\r\n      vm.$refs[vm.uploadRef].submit()\r\n      vm.addFileAry = []\r\n    },\r\n    // 附件下载\r\n    async downLoadFile(data) {\r\n      let link = document.createElement('a')\r\n      link.href = data.url\r\n      link.download = data.name\r\n      link.click()\r\n      window.URL.revokeObjectURL(link.href)\r\n    }\r\n  }\r\n}\r\n",null]}