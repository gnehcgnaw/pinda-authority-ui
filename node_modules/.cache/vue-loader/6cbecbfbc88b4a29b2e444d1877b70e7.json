{"remainingRequest":"D:\\品达通用权限系统\\资料\\前端工程\\pinda-authority-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\品达通用权限系统\\资料\\前端工程\\pinda-authority-ui\\src\\views\\febs\\system\\user\\Edit.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\品达通用权限系统\\资料\\前端工程\\pinda-authority-ui\\src\\views\\febs\\system\\user\\Edit.vue","mtime":1585207882846},{"path":"D:\\品达通用权限系统\\资料\\前端工程\\pinda-authority-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\品达通用权限系统\\资料\\前端工程\\pinda-authority-ui\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\品达通用权限系统\\资料\\前端工程\\pinda-authority-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\品达通用权限系统\\资料\\前端工程\\pinda-authority-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport { validMobile } from '@/utils/my-validate'\r\nimport Treeselect from '@riophae/vue-treeselect'\r\nimport '@riophae/vue-treeselect/dist/vue-treeselect.css'\r\n\r\nexport default {\r\n  name: 'UserEdit',\r\n  components: { Treeselect },\r\n  props: {\r\n    dialogVisible: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    title: {\r\n      type: String,\r\n      default: ''\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      user: this.initUser(),\r\n      screenWidth: 0,\r\n      width: this.initWidth(),\r\n      depts: [],\r\n      roles: [],\r\n      rules: {\r\n        username: [\r\n          { required: true, message: this.$t('rules.require'), trigger: 'blur' },\r\n          { min: 4, max: 10, message: this.$t('rules.range4to10'), trigger: 'blur' },\r\n          { validator: (rule, value, callback) => {\r\n            if (!this.user.userId) {\r\n              this.$get(`system/user/check/${value}`).then((r) => {\r\n                if (!r.data) {\r\n                  callback(this.$t('rules.usernameExist'))\r\n                } else {\r\n                  callback()\r\n                }\r\n              })\r\n            } else {\r\n              callback()\r\n            }\r\n          }, trigger: 'blur' }\r\n        ],\r\n        email: { type: 'email', message: this.$t('rules.email'), trigger: 'blur' },\r\n        mobile: { validator: (rule, value, callback) => {\r\n          if (value !== '' && !validMobile(value)) {\r\n            callback(this.$t('rules.mobile'))\r\n          } else {\r\n            callback()\r\n          }\r\n        }, trigger: 'blur' },\r\n        roleId: { required: true, message: this.$t('rules.require'), trigger: 'change' },\r\n        sex: { required: true, message: this.$t('rules.require'), trigger: 'change' },\r\n        status: { required: true, message: this.$t('rules.require'), trigger: 'blur' }\r\n      }\r\n    }\r\n  },\r\n  computed: {\r\n    isVisible: {\r\n      get() {\r\n        return this.dialogVisible\r\n      },\r\n      set() {\r\n        this.close()\r\n        this.reset()\r\n      }\r\n    }\r\n  },\r\n  mounted() {\r\n    this.initDept()\r\n    this.initRoles()\r\n    window.onresize = () => {\r\n      return (() => {\r\n        this.width = this.initWidth()\r\n      })()\r\n    }\r\n  },\r\n  methods: {\r\n    initUser() {\r\n      return {\r\n        userId: '',\r\n        username: '',\r\n        password: '1234qwer',\r\n        email: '',\r\n        mobile: '',\r\n        sex: '',\r\n        status: '1',\r\n        deptId: null,\r\n        roleId: []\r\n      }\r\n    },\r\n    initWidth() {\r\n      this.screenWidth = document.body.clientWidth\r\n      if (this.screenWidth < 991) {\r\n        return '90%'\r\n      } else if (this.screenWidth < 1400) {\r\n        return '45%'\r\n      } else {\r\n        return '800px'\r\n      }\r\n    },\r\n    initDept() {\r\n      this.$get('system/dept').then((r) => {\r\n        this.depts = r.data.data.rows\r\n      }).catch((error) => {\r\n        console.error(error)\r\n        this.$message({\r\n          message: this.$t('tips.getDataFail'),\r\n          type: 'error'\r\n        })\r\n      })\r\n    },\r\n    initRoles() {\r\n      this.$get('system/role/options').then((r) => {\r\n        this.roles = r.data.data\r\n      }).catch((error) => {\r\n        console.error(error)\r\n        this.$message({\r\n          message: this.$t('tips.getDataFail'),\r\n          type: 'error'\r\n        })\r\n      })\r\n    },\r\n    setUser(val) {\r\n      this.user = { ...val }\r\n    },\r\n    close() {\r\n      this.$emit('close')\r\n    },\r\n    submitForm() {\r\n      this.$refs.form.validate((valid) => {\r\n        if (valid) {\r\n          if (!this.user.userId) {\r\n            // create\r\n            this.user.roleId = this.user.roleId.join(',')\r\n            this.$post('system/user', { ...this.user }).then(() => {\r\n              this.isVisible = false\r\n              this.$message({\r\n                message: this.$t('tips.createSuccess'),\r\n                type: 'success'\r\n              })\r\n              this.$emit('success')\r\n            })\r\n          } else {\r\n            // update\r\n            this.user.roleId = this.user.roleId.join(',')\r\n            this.user.createTime = this.user.modifyTime = this.user.lastLoginTime = null\r\n            this.$put('system/user', { ...this.user }).then(() => {\r\n              this.isVisible = false\r\n              this.$message({\r\n                message: this.$t('tips.updateSuccess'),\r\n                type: 'success'\r\n              })\r\n              this.$emit('success')\r\n            })\r\n          }\r\n        } else {\r\n          return false\r\n        }\r\n      })\r\n    },\r\n    reset() {\r\n      // 先清除校验，再清除表单，不然有奇怪的bug\r\n      this.$refs.form.clearValidate()\r\n      this.$refs.form.resetFields()\r\n      this.user = this.initUser()\r\n    }\r\n  }\r\n}\r\n",null]}