{"remainingRequest":"D:\\品达通用权限系统\\资料\\前端工程\\pinda-authority-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\品达通用权限系统\\资料\\前端工程\\pinda-authority-ui\\src\\views\\pinda\\user\\user\\Index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\品达通用权限系统\\资料\\前端工程\\pinda-authority-ui\\src\\views\\pinda\\user\\user\\Index.vue","mtime":1585207882926},{"path":"D:\\品达通用权限系统\\资料\\前端工程\\pinda-authority-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\品达通用权限系统\\资料\\前端工程\\pinda-authority-ui\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\品达通用权限系统\\资料\\前端工程\\pinda-authority-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\品达通用权限系统\\资料\\前端工程\\pinda-authority-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport Pagination from '@/components/Pagination'\r\nimport Treeselect from '@riophae/vue-treeselect'\r\nimport '@riophae/vue-treeselect/dist/vue-treeselect.css'\r\nimport UserEdit from './Edit'\r\nimport UserView from './View'\r\nimport userApi from '@/api/User.js'\r\nimport orgApi from '@/api/Org.js'\r\n\r\nexport default {\r\n  name: 'UserManage',\r\n  components: { Pagination, UserEdit, UserView, Treeselect },\r\n  filters: {\r\n    userAvatarFilter(name) {\r\n      return name.charAt(0)\r\n    },\r\n    sexFilter(status) {\r\n      const map = {\r\n        W: 'success',\r\n        M: 'danger',\r\n        N: 'info'\r\n      }\r\n      return map[status] || 'info'\r\n    },\r\n    statusFilter(status) {\r\n      const map = {\r\n        false: 'danger',\r\n        true: 'success'\r\n      }\r\n      return map[status] || 'success'\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      orgList: [],\r\n      dialog: {\r\n        isVisible: false,\r\n        type: 'add'\r\n      },\r\n      userViewVisible: false,\r\n      tableKey: 0,\r\n      queryParams: {},\r\n      sort: {},\r\n      selection: [],\r\n      // 以下已修改\r\n      loading: false,\r\n      tableData: {\r\n        total: 0\r\n      },\r\n      pagination: {\r\n        size: 10,\r\n        current: 1\r\n      }\r\n    }\r\n  },\r\n  computed: {\r\n    currentUser() {\r\n      return this.$store.state.account.user\r\n    }\r\n  },\r\n  watch: {\r\n    $route() {\r\n      if (this.$route.path === '/user/user') {\r\n        this.initOrg()\r\n      }\r\n    }\r\n  },\r\n  mounted() {\r\n    console.log('init mounted')\r\n    this.fetch()\r\n    this.initOrg()\r\n  },\r\n  methods: {\r\n    initOrg() {\r\n      orgApi.allTree({ status: true }).then(response => {\r\n        const res = response.data\r\n        this.orgList = res.data\r\n      })\r\n    },\r\n    myAvatar(avatar) {\r\n      if (!avatar) {\r\n        return require(`@/assets/avatar/default.jpg`)\r\n      } else {\r\n        if (avatar.startsWith('http://') || avatar.startsWith('https://')) {\r\n          return avatar\r\n        } else {\r\n          return require(`@/assets/avatar/${avatar}`)\r\n        }\r\n      }\r\n    },\r\n    filterStatus(value, row) {\r\n      return row.status === value\r\n    },\r\n    viewClose() {\r\n      this.userViewVisible = false\r\n    },\r\n    editClose() {\r\n      this.dialog.isVisible = false\r\n    },\r\n    editSuccess() {\r\n      this.search()\r\n    },\r\n    onSelectChange(selection) {\r\n      this.selection = selection\r\n    },\r\n    loadListOptions({ callback }) {\r\n      callback()\r\n    },\r\n    search() {\r\n      this.fetch({\r\n        ...this.queryParams,\r\n        ...this.sort\r\n      })\r\n    },\r\n    reset() {\r\n      this.queryParams = {}\r\n      this.sort = {}\r\n      this.$refs.table.clearSort()\r\n      this.$refs.table.clearFilter()\r\n      this.search()\r\n    },\r\n    exportExcel() {\r\n      this.$message({\r\n        message: '待完善',\r\n        type: 'warning'\r\n      })\r\n    },\r\n    resetPassword() {\r\n      if (!this.selection.length) {\r\n        this.$message({\r\n          message: this.$t('tips.noDataSelected'),\r\n          type: 'warning'\r\n        })\r\n        return\r\n      }\r\n      this.$confirm(\r\n        this.$t('tips.confirmRestPassword'),\r\n        this.$t('common.tips'),\r\n        {\r\n          confirmButtonText: this.$t('common.confirm'),\r\n          cancelButtonText: this.$t('common.cancel'),\r\n          type: 'warning'\r\n        }\r\n      )\r\n        .then(() => {\r\n          const ids = []\r\n          this.selection.forEach(u => {\r\n            ids.push(u.id)\r\n          })\r\n          userApi.reset({ ids: ids }).then(response => {\r\n            const res = response.data\r\n            if (res.isSuccess) {\r\n              this.$message({\r\n                message: this.$t('tips.resetPasswordSuccess'),\r\n                type: 'success'\r\n              })\r\n            }\r\n            this.clearSelections()\r\n          })\r\n        })\r\n        .catch(() => {\r\n          this.clearSelections()\r\n        })\r\n    },\r\n    singleDelete(row) {\r\n      this.$refs.table.toggleRowSelection(row, true)\r\n      this.batchDelete()\r\n    },\r\n    batchDelete() {\r\n      if (!this.selection.length) {\r\n        this.$message({\r\n          message: this.$t('tips.noDataSelected'),\r\n          type: 'warning'\r\n        })\r\n        return\r\n      }\r\n      let contain = false\r\n      this.$confirm(this.$t('tips.confirmDelete'), this.$t('common.tips'), {\r\n        confirmButtonText: this.$t('common.confirm'),\r\n        cancelButtonText: this.$t('common.cancel'),\r\n        type: 'warning'\r\n      })\r\n        .then(() => {\r\n          const ids = []\r\n          this.selection.forEach(u => {\r\n            if (u.id === this.currentUser.id) {\r\n              contain = true\r\n              return\r\n            }\r\n            ids.push(u.id)\r\n          })\r\n          if (contain) {\r\n            this.$message({\r\n              message: this.$t('tips.containCurrentUser'),\r\n              type: 'warning'\r\n            })\r\n            this.clearSelections()\r\n          } else {\r\n            this.delete(ids)\r\n          }\r\n        })\r\n        .catch(() => {\r\n          this.clearSelections()\r\n        })\r\n    },\r\n    clearSelections() {\r\n      this.$refs.table.clearSelection()\r\n    },\r\n    delete(ids) {\r\n      userApi.delete({ ids: ids }).then(response => {\r\n        const res = response.data\r\n        if (res.isSuccess) {\r\n          this.$message({\r\n            message: this.$t('tips.deleteSuccess'),\r\n            type: 'success'\r\n          })\r\n        }\r\n        this.search()\r\n      })\r\n    },\r\n    add() {\r\n      this.dialog.type = 'add'\r\n      this.dialog.isVisible = true\r\n      this.$refs.edit.setUser(false, this.orgList)\r\n    },\r\n    view(row) {\r\n      this.$refs.view.setUser(row, this.orgList)\r\n      this.userViewVisible = true\r\n    },\r\n    edit(row) {\r\n      this.$refs.edit.setUser(row, this.orgList)\r\n      this.dialog.type = 'edit'\r\n      this.dialog.isVisible = true\r\n    },\r\n    fetch(params = {}) {\r\n      this.loading = true\r\n      params.size = this.pagination.size\r\n      params.current = this.pagination.current\r\n      if (this.queryParams.timeRange) {\r\n        params.startCreateTime = this.queryParams.timeRange[0]\r\n        params.endCreateTime = this.queryParams.timeRange[1]\r\n      }\r\n      userApi.page(params).then(response => {\r\n        const res = response.data\r\n        this.loading = false\r\n        if (res.isSuccess) {\r\n          this.tableData = res.data\r\n        }\r\n      })\r\n    },\r\n    sortChange(val) {\r\n      this.sort.field = val.prop\r\n      this.sort.order = val.order\r\n      this.search()\r\n    }\r\n  }\r\n}\r\n",null]}