{"remainingRequest":"D:\\projects\\beike\\pinda-authority-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\projects\\beike\\pinda-authority-ui\\src\\views\\profile\\components\\Password.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\projects\\beike\\pinda-authority-ui\\src\\views\\profile\\components\\Password.vue","mtime":1585207882933},{"path":"D:\\projects\\beike\\pinda-authority-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\projects\\beike\\pinda-authority-ui\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\projects\\beike\\pinda-authority-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\projects\\beike\\pinda-authority-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport userApi from '@/api/User.js'\r\nexport default {\r\n  props: {\r\n    user: {\r\n      type: Object,\r\n      default: () => {\r\n        return {}\r\n      }\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      p: {\r\n        oldPassword: '',\r\n        password: '',\r\n        confirmPassword: ''\r\n      },\r\n      rules: {\r\n        oldPassword: [\r\n          { required: true, message: this.$t('rules.require'), trigger: 'blur' }\r\n        ],\r\n        password: [\r\n          {\r\n            required: true,\r\n            message: this.$t('rules.require'),\r\n            trigger: 'blur'\r\n          },\r\n          {\r\n            min: 6,\r\n            max: 20,\r\n            message: this.$t('rules.range6to20'),\r\n            trigger: 'blur'\r\n          }\r\n        ],\r\n        confirmPassword: [\r\n          {\r\n            required: true,\r\n            message: this.$t('rules.require'),\r\n            trigger: 'blur'\r\n          },\r\n          {\r\n            validator: (rule, value, callback) => {\r\n              if (this.p.password !== value) {\r\n                callback(this.$t('tips.notEqual'))\r\n              } else {\r\n                callback()\r\n              }\r\n            },\r\n            trigger: 'blur'\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    submit() {\r\n      this.$refs.form.validate(valid => {\r\n        if (valid) {\r\n          debugger\r\n          userApi\r\n            .updatePassword({\r\n              ...this.p,\r\n              ...{ id: this.user.id }\r\n            })\r\n            .then(response => {\r\n              const res = response.data\r\n              if (res.isSuccess) {\r\n                this.$message({\r\n                  message: this.$t('tips.updateSuccess'),\r\n                  type: 'success'\r\n                })\r\n                this.$refs.form.clearValidate()\r\n                this.$refs.form.resetFields()\r\n              }\r\n            })\r\n        } else {\r\n          return false\r\n        }\r\n      })\r\n    }\r\n  }\r\n}\r\n",null]}