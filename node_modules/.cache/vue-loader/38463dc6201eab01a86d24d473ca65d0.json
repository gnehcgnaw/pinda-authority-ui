{"remainingRequest":"D:\\projects\\beike\\pinda-authority-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\projects\\beike\\pinda-authority-ui\\src\\views\\pinda\\sms\\manage\\Index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\projects\\beike\\pinda-authority-ui\\src\\views\\pinda\\sms\\manage\\Index.vue","mtime":1585207882912},{"path":"D:\\projects\\beike\\pinda-authority-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\projects\\beike\\pinda-authority-ui\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\projects\\beike\\pinda-authority-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\projects\\beike\\pinda-authority-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport Pagination from '@/components/Pagination'\r\nimport smsTaskApi from '@/api/SmsTask.js'\r\nimport { converEnum } from '@/utils/utils'\r\n\r\nexport default {\r\n  name: 'StationManage',\r\n  components: { Pagination },\r\n  filters: {\r\n    statusFilter(status) {\r\n      const map = {\r\n        WAITING: 'danger',\r\n        SUCCESS: 'success',\r\n        FAIL: 'error'\r\n      }\r\n      return map[status] || 'success'\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      dialog: {\r\n        isVisible: false,\r\n        type: 'add'\r\n      },\r\n      tableKey: 0,\r\n      queryParams: {},\r\n      sort: {},\r\n      selection: [],\r\n      // 以下已修改\r\n      loading: false,\r\n      tableData: {\r\n        total: 0\r\n      },\r\n      pagination: {\r\n        size: 10,\r\n        current: 1\r\n      }\r\n    }\r\n  },\r\n  computed: {\r\n    statusFilters() {\r\n      return converEnum(this.$store.state.common.enums.TaskStatus)\r\n    }\r\n  },\r\n  watch: {\r\n    $route() {\r\n      this.fetch()\r\n    }\r\n  },\r\n  mounted() {\r\n    this.fetch()\r\n  },\r\n  methods: {\r\n    filterStatus(value, row) {\r\n      return row.status === value\r\n    },\r\n    onSelectChange(selection) {\r\n      this.selection = selection\r\n    },\r\n    search() {\r\n      this.fetch({\r\n        ...this.queryParams,\r\n        ...this.sort\r\n      })\r\n    },\r\n    reset() {\r\n      this.queryParams = {}\r\n      this.sort = {}\r\n      this.$refs.table.clearSort()\r\n      this.$refs.table.clearFilter()\r\n      this.search()\r\n    },\r\n    exportExcel() {\r\n      this.$message({\r\n        message: '待完善',\r\n        type: 'warning'\r\n      })\r\n    },\r\n    singleDelete(row) {\r\n      this.$refs.table.toggleRowSelection(row, true)\r\n      this.batchDelete()\r\n    },\r\n    batchDelete() {\r\n      if (!this.selection.length) {\r\n        this.$message({\r\n          message: this.$t('tips.noDataSelected'),\r\n          type: 'warning'\r\n        })\r\n        return\r\n      }\r\n      this.$confirm(this.$t('tips.confirmDelete'), this.$t('common.tips'), {\r\n        confirmButtonText: this.$t('common.confirm'),\r\n        cancelButtonText: this.$t('common.cancel'),\r\n        type: 'warning'\r\n      })\r\n        .then(() => {\r\n          const ids = []\r\n          this.selection.forEach(u => {\r\n            ids.push(u.id)\r\n          })\r\n          this.delete(ids)\r\n        })\r\n        .catch(() => {\r\n          this.clearSelections()\r\n        })\r\n    },\r\n    clearSelections() {\r\n      this.$refs.table.clearSelection()\r\n    },\r\n    delete(ids) {\r\n      smsTaskApi.delete({ ids: ids }).then(response => {\r\n        const res = response.data\r\n        if (res.isSuccess) {\r\n          this.$message({\r\n            message: this.$t('tips.deleteSuccess'),\r\n            type: 'success'\r\n          })\r\n        }\r\n        this.search()\r\n      })\r\n    },\r\n    copy(row) {\r\n      this.$router.push({\r\n        path: '/sms/manage/edit',\r\n        query: {\r\n          id: row.id,\r\n          type: 'copy'\r\n        }\r\n      })\r\n    },\r\n    view(row) {\r\n      this.$router.push({\r\n        path: '/sms/manage/edit',\r\n        query: {\r\n          id: row.id,\r\n          type: 'view'\r\n        }\r\n      })\r\n    },\r\n    edit(row) {\r\n      this.$router.push({\r\n        path: '/sms/manage/edit',\r\n        query: {\r\n          id: row.id,\r\n          type: 'edit'\r\n        }\r\n      })\r\n    },\r\n    fetch(params = {}) {\r\n      this.loading = true\r\n      params.size = this.pagination.size\r\n      params.current = this.pagination.current\r\n      if (this.queryParams.timeRange) {\r\n        params.startCreateTime = this.queryParams.timeRange[0]\r\n        params.endCreateTime = this.queryParams.timeRange[1]\r\n      }\r\n      smsTaskApi.page(params).then(response => {\r\n        const res = response.data\r\n        this.loading = false\r\n        if (res.isError) {\r\n          return\r\n        }\r\n        this.tableData = res.data\r\n      })\r\n    },\r\n    sortChange(val) {\r\n      this.sort.field = val.prop\r\n      this.sort.order = val.order\r\n      this.search()\r\n    },\r\n    filterChange(filters) {\r\n      for (const key in filters) {\r\n        this.queryParams[key] = filters[key][0]\r\n      }\r\n      this.search()\r\n    }\r\n  }\r\n}\r\n",null]}