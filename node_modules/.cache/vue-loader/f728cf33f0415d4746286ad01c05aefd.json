{"remainingRequest":"D:\\projects\\beike\\pinda-authority-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\projects\\beike\\pinda-authority-ui\\src\\views\\febs\\system\\menu\\Index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\projects\\beike\\pinda-authority-ui\\src\\views\\febs\\system\\menu\\Index.vue","mtime":1585207882842},{"path":"D:\\projects\\beike\\pinda-authority-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\projects\\beike\\pinda-authority-ui\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\projects\\beike\\pinda-authority-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\projects\\beike\\pinda-authority-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport Icons from './Icons'\r\n\r\nexport default {\r\n  name: 'MenuManage',\r\n  components: { Icons },\r\n  data() {\r\n    return {\r\n      iconVisible: false,\r\n      selection: [],\r\n      menuTree: [],\r\n      menuName: '',\r\n      menu: this.initMenu(),\r\n      rules: {\r\n        menuName: [\r\n          {\r\n            required: true,\r\n            message: this.$t('rules.require'),\r\n            trigger: 'blur'\r\n          },\r\n          {\r\n            min: 2,\r\n            max: 10,\r\n            message: this.$t('rules.range2to10'),\r\n            trigger: 'blur'\r\n          }\r\n        ],\r\n        path: {\r\n          max: 100,\r\n          message: this.$t('rules.noMoreThan100'),\r\n          trigger: 'blur'\r\n        },\r\n        component: {\r\n          max: 100,\r\n          message: this.$t('rules.noMoreThan100'),\r\n          trigger: 'blur'\r\n        },\r\n        perms: {\r\n          max: 50,\r\n          message: this.$t('rules.noMoreThan50'),\r\n          trigger: 'blur'\r\n        }\r\n      }\r\n    }\r\n  },\r\n  mounted() {\r\n    this.initMenuTree()\r\n  },\r\n  methods: {\r\n    initMenuTree() {\r\n      this.$get('system/menu').then(r => {\r\n        this.menuTree = r.data.data.rows\r\n      })\r\n    },\r\n    initMenu() {\r\n      return {\r\n        menuId: '',\r\n        menuName: '',\r\n        parentId: 0,\r\n        path: '',\r\n        component: '',\r\n        perms: '',\r\n        type: '0',\r\n        orderNum: 0,\r\n        icon: ''\r\n      }\r\n    },\r\n    exportExcel() {\r\n      this.$download(\r\n        'system/menu/excel',\r\n        {\r\n          menuName: this.menuName\r\n        },\r\n        `menu_${new Date().getTime()}.xlsx`\r\n      )\r\n    },\r\n    filterNode(value, data) {\r\n      if (!value) return true\r\n      return data.label.indexOf(value) !== -1\r\n    },\r\n    nodeClick(data) {\r\n      this.menu = { ...data }\r\n      this.menu.menuName = this.menu.label\r\n      this.menu.menuId = this.menu.id\r\n      this.$refs.form.clearValidate()\r\n    },\r\n    handleNumChange(val) {\r\n      this.menu.orderNum = val\r\n    },\r\n    chooseIcons() {\r\n      this.iconVisible = true\r\n    },\r\n    chooseIcon(icon) {\r\n      this.menu.icon = icon\r\n      this.iconVisible = false\r\n    },\r\n    submit() {\r\n      this.$refs.form.validate(valid => {\r\n        if (valid) {\r\n          this.menu.createTime = this.menu.modifyTime = null\r\n          if (this.menu.menuId) {\r\n            this.$put('system/menu', { ...this.menu }).then(() => {\r\n              this.$message({\r\n                message: this.$t('tips.updateSuccess'),\r\n                type: 'success'\r\n              })\r\n              this.reset()\r\n            })\r\n          } else {\r\n            this.$post('system/menu', { ...this.menu }).then(() => {\r\n              this.$message({\r\n                message: this.$t('tips.createSuccess'),\r\n                type: 'success'\r\n              })\r\n              this.reset()\r\n            })\r\n          }\r\n        } else {\r\n          return false\r\n        }\r\n      })\r\n    },\r\n    reset() {\r\n      this.initMenuTree()\r\n      this.menuName = ''\r\n      this.resetForm()\r\n    },\r\n    search() {\r\n      this.$refs.menuTree.filter(this.menuName)\r\n    },\r\n    add() {\r\n      this.resetForm()\r\n      const checked = this.$refs.menuTree.getCheckedKeys()\r\n      if (checked.length > 1) {\r\n        this.$message({\r\n          message: this.$t('tips.onlyChooseOne'),\r\n          type: 'warning'\r\n        })\r\n      } else if (checked.length > 0) {\r\n        this.menu.parentId = checked[0]\r\n      } else {\r\n        this.menu.parentId = 0\r\n      }\r\n    },\r\n    deleteMenu() {\r\n      const checked = this.$refs.menuTree.getCheckedKeys()\r\n      if (checked.length === 0) {\r\n        this.$message({\r\n          message: this.$t('tips.noNodeSelected'),\r\n          type: 'warning'\r\n        })\r\n      } else {\r\n        this.$confirm(\r\n          this.$t('tips.confirmDeleteNode'),\r\n          this.$t('common.tips'),\r\n          {\r\n            confirmButtonText: this.$t('common.confirm'),\r\n            cancelButtonText: this.$t('common.cancel'),\r\n            type: 'warning'\r\n          }\r\n        )\r\n          .then(() => {\r\n            this.menu.menuIds = checked.join(',')\r\n            this.$delete(`system/menu/${this.menu.menuIds}`).then(() => {\r\n              this.$message({\r\n                message: this.$t('tips.deleteSuccess'),\r\n                type: 'success'\r\n              })\r\n              this.reset()\r\n            })\r\n          })\r\n          .catch(() => {\r\n            this.$refs.menuTree.setCheckedKeys([])\r\n          })\r\n      }\r\n    },\r\n    resetForm() {\r\n      this.$refs.form.clearValidate()\r\n      this.$refs.form.resetFields()\r\n      this.menu = this.initMenu()\r\n    }\r\n  }\r\n}\r\n",null]}