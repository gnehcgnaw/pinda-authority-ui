{"remainingRequest":"D:\\projects\\beike\\pinda-authority-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\projects\\beike\\pinda-authority-ui\\src\\views\\pinda\\auth\\menu\\Index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\projects\\beike\\pinda-authority-ui\\src\\views\\pinda\\auth\\menu\\Index.vue","mtime":1585207882865},{"path":"D:\\projects\\beike\\pinda-authority-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\projects\\beike\\pinda-authority-ui\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\projects\\beike\\pinda-authority-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\projects\\beike\\pinda-authority-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport commonTree from '@/components/pinda/CommonTree.vue'\r\nimport Icons from './Icons'\r\nimport ResourceEdit from './Edit'\r\nimport Pagination from '@/components/Pagination'\r\nimport menuApi from '@/api/Menu.js'\r\nimport resourceApi from '@/api/Resource.js'\r\n\r\nexport default {\r\n  name: 'MenuManage',\r\n  components: { Icons, commonTree, Pagination, ResourceEdit },\r\n  data() {\r\n    return {\r\n      dialog: {\r\n        isVisible: false,\r\n        type: 'add'\r\n      },\r\n      iconVisible: false,\r\n      menuTree: [],\r\n      name: '',\r\n      menu: this.initMenu(),\r\n      resourceQueryParams: {\r\n        menuId: null\r\n      },\r\n      resourceTableKey: 0,\r\n      resourceSort: {},\r\n      resourceLoading: false,\r\n      resourceSelection: [],\r\n      resourceTableData: {\r\n        total: 0\r\n      },\r\n      resourcePagination: {\r\n        size: 10,\r\n        current: 1\r\n      },\r\n      rules: {\r\n        name: [\r\n          {\r\n            required: true,\r\n            message: this.$t('rules.require'),\r\n            trigger: 'blur'\r\n          },\r\n          {\r\n            min: 1,\r\n            max: 255,\r\n            message: this.$t('rules.range2to10'),\r\n            trigger: 'blur'\r\n          }\r\n        ],\r\n        path: [\r\n          {\r\n            max: 255,\r\n            message: this.$t('rules.noMoreThan100'),\r\n            trigger: 'blur'\r\n          },\r\n          {\r\n            required: true,\r\n            message: this.$t('rules.require'),\r\n            trigger: 'blur'\r\n          },\r\n          {\r\n            validator: (rule, value, callback) => {\r\n              const isUrl = this.isUrl(this.menu.path)\r\n\r\n              if (value === '/' || (!isUrl && value.endsWith('/'))) {\r\n                callback('请填写有效的路由地址')\r\n              } else {\r\n                callback()\r\n              }\r\n            },\r\n            trigger: 'blur'\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  computed: {\r\n    menuComponent() {\r\n      let comp = ''\r\n      if (this.menu.path && this.menu.path !== '/') {\r\n        const isUrl = this.isUrl(this.menu.path)\r\n        if (isUrl) {\r\n          comp = `跳转地址：${this.menu.path}`\r\n        } else {\r\n          comp = `前端组件：pinda${this.menu.path}/Index.vue`\r\n        }\r\n      } else {\r\n        comp = `前端组件：pinda/Index.vue`\r\n      }\r\n      return comp\r\n    }\r\n  },\r\n  watch: {\r\n    'menu.path': function() {\r\n      this.computedComponent()\r\n    }\r\n  },\r\n  mounted() {\r\n    this.initMenuTree()\r\n  },\r\n  methods: {\r\n    isUrl(path) {\r\n      const urls = [\r\n        'http://',\r\n        '/http://',\r\n        'https://',\r\n        '/https://',\r\n        'www.',\r\n        '/www.'\r\n      ]\r\n      const urlIndex = urls.findIndex(item => {\r\n        return path.startsWith(item)\r\n      })\r\n      return urlIndex >= 0\r\n    },\r\n    menuPath() {\r\n      const isUrl = this.isUrl(this.menu.path)\r\n      if (!isUrl && !this.menu.path.startsWith('/')) {\r\n        this.menu.path = '/' + this.menu.path\r\n      } else if (isUrl) {\r\n        if (this.menu.path.startsWith('/')) {\r\n          this.menu.path = this.menu.path.substr(1)\r\n        }\r\n      }\r\n    },\r\n    computedComponent() {\r\n      const isUrl = this.isUrl(this.menu.path)\r\n      if (isUrl) {\r\n        this.menu.component = 'Layout'\r\n      } else {\r\n        if (this.menu.path) {\r\n          this.menu.component = `pinda${this.menu.path}/Index`\r\n        } else {\r\n          this.menu.component = `pinda/Index`\r\n        }\r\n      }\r\n    },\r\n    initMenuTree() {\r\n      menuApi.allTree().then(response => {\r\n        const res = response.data\r\n        this.menuTree = res.data\r\n      })\r\n    },\r\n    initMenu() {\r\n      return {\r\n        id: '',\r\n        name: '',\r\n        describe: '',\r\n        code: '',\r\n        isPublic: false,\r\n        path: '',\r\n        component: '',\r\n        isEnable: true,\r\n        sortValue: '',\r\n        parentId: 0,\r\n        icon: '',\r\n        group: ''\r\n      }\r\n    },\r\n    exportExcel() {\r\n      this.$message({\r\n        message: '带完善',\r\n        type: 'success'\r\n      })\r\n    },\r\n    nodeClick(data) {\r\n      this.menu = { ...data }\r\n      this.menu.name = this.menu.label\r\n      this.$refs.form.clearValidate()\r\n\r\n      this.resourceQueryParams.menuId = data.id\r\n      this.resourceSearch()\r\n    },\r\n    handleNumChange(val) {\r\n      this.menu.sortValue = val\r\n    },\r\n    chooseIcons() {\r\n      this.iconVisible = true\r\n    },\r\n    chooseIcon(icon) {\r\n      this.menu.icon = icon\r\n      this.iconVisible = false\r\n    },\r\n    submit() {\r\n      this.$refs.form.validate(valid => {\r\n        if (valid) {\r\n          this.menu.createTime = this.menu.updateTime = null\r\n          if (this.menu.id) {\r\n            this.update()\r\n          } else {\r\n            this.save()\r\n          }\r\n        } else {\r\n          return false\r\n        }\r\n      })\r\n    },\r\n    save() {\r\n      console.log(this.menu.component)\r\n      menuApi.save(this.menu).then(response => {\r\n        const res = response.data\r\n        if (res.isSuccess) {\r\n          this.$message({\r\n            message: this.$t('tips.createSuccess'),\r\n            type: 'success'\r\n          })\r\n        }\r\n        this.reset()\r\n      })\r\n    },\r\n    update() {\r\n      console.log(this.menu)\r\n      menuApi.update(this.menu).then(response => {\r\n        const res = response.data\r\n        if (res.isSuccess) {\r\n          this.$message({\r\n            message: this.$t('tips.updateSuccess'),\r\n            type: 'success'\r\n          })\r\n        }\r\n        this.reset()\r\n      })\r\n    },\r\n    reset() {\r\n      this.initMenuTree()\r\n      this.name = ''\r\n      this.resetForm()\r\n    },\r\n    search() {\r\n      this.$refs.menuTree.$refs.treeRef.filter(this.name)\r\n    },\r\n    add() {\r\n      this.resetForm()\r\n      const checked = this.$refs.menuTree.$refs.treeRef.getCheckedKeys()\r\n      if (checked.length > 1) {\r\n        this.$message({\r\n          message: this.$t('tips.onlyChooseOne'),\r\n          type: 'warning'\r\n        })\r\n      } else if (checked.length > 0) {\r\n        this.menu.parentId = checked[0]\r\n      } else {\r\n        this.menu.parentId = 0\r\n      }\r\n      this.resourceQueryParams.menuId = null\r\n      this.resourceReset()\r\n    },\r\n    deleteMenu() {\r\n      const checked = this.$refs.menuTree.$refs.treeRef.getCheckedKeys()\r\n      if (checked.length === 0) {\r\n        this.$message({\r\n          message: this.$t('tips.noNodeSelected'),\r\n          type: 'warning'\r\n        })\r\n      } else {\r\n        this.$confirm(\r\n          this.$t('tips.confirmDeleteNode'),\r\n          this.$t('common.tips'),\r\n          {\r\n            confirmButtonText: this.$t('common.confirm'),\r\n            cancelButtonText: this.$t('common.cancel'),\r\n            type: 'warning'\r\n          }\r\n        )\r\n          .then(() => {\r\n            menuApi.delete({ ids: checked }).then(response => {\r\n              const res = response.data\r\n              if (res.isSuccess) {\r\n                this.$message({\r\n                  message: this.$t('tips.deleteSuccess'),\r\n                  type: 'success'\r\n                })\r\n              }\r\n              this.reset()\r\n              this.resourceQueryParams.menuId = null\r\n              this.resourceReset()\r\n            })\r\n          })\r\n          .catch(() => {\r\n            this.$refs.menuTree.$refs.treeRef.setCheckedKeys([])\r\n          })\r\n      }\r\n    },\r\n    resetForm() {\r\n      this.$refs.form.clearValidate()\r\n      this.$refs.form.resetFields()\r\n      this.menu = this.initMenu()\r\n    },\r\n    resourceAdd() {\r\n      this.dialog.type = 'add'\r\n      this.dialog.isVisible = true\r\n      this.$refs.resourceEdit.setResource({\r\n        menuId: this.menu.id\r\n      })\r\n    },\r\n    resourceEdit(row) {\r\n      this.dialog.type = 'edit'\r\n      this.dialog.isVisible = true\r\n      row.menuId = this.menu.id\r\n      this.$refs.resourceEdit.setResource(row)\r\n    },\r\n    resourceSingleDelete(row) {\r\n      this.$refs.resourceTable.toggleRowSelection(row, true)\r\n      this.resourceBatchDelete()\r\n    },\r\n    resourceBatchDelete() {\r\n      if (!this.resourceSelection.length) {\r\n        this.$message({\r\n          message: this.$t('tips.noDataSelected'),\r\n          type: 'warning'\r\n        })\r\n        return\r\n      }\r\n      this.$confirm(this.$t('tips.confirmDeleteNode'), this.$t('common.tips'), {\r\n        confirmButtonText: this.$t('common.confirm'),\r\n        cancelButtonText: this.$t('common.cancel'),\r\n        type: 'warning'\r\n      }).then(() => {\r\n        const ids = this.resourceSelection.map(item => item.id)\r\n        resourceApi.delete({ ids: ids }).then(response => {\r\n          const res = response.data\r\n          if (res.isSuccess) {\r\n            this.$message({\r\n              message: this.$t('tips.deleteSuccess'),\r\n              type: 'success'\r\n            })\r\n          }\r\n          this.resourceReset()\r\n        })\r\n      })\r\n    },\r\n    resourceReset() {\r\n      this.resourceQueryParams = {\r\n        menuId: this.resourceQueryParams.menuId\r\n      }\r\n      this.resourceSort = {}\r\n      this.$refs.resourceTable.clearSort()\r\n      this.$refs.resourceTable.clearFilter()\r\n      this.resourceSearch()\r\n    },\r\n    resourceSearch() {\r\n      this.resourceFetch({\r\n        ...this.resourceQueryParams,\r\n        ...this.resourceSort\r\n      })\r\n    },\r\n    resourceFetch(params = {}) {\r\n      params.size = this.resourcePagination.size\r\n      params.current = this.resourcePagination.current\r\n\r\n      params = { ...this.resourceQueryParams, ...params }\r\n      if (params.menuId) {\r\n        this.resourceLoading = true\r\n        resourceApi.page(params).then(response => {\r\n          const res = response.data\r\n          this.resourceTableData = res.data\r\n          this.resourceLoading = false\r\n        })\r\n      } else {\r\n        this.resourceTableData = {}\r\n      }\r\n    },\r\n    resourceSortChange(val) {\r\n      this.resourceSort.field = val.prop\r\n      this.resourceSort.order = val.order\r\n      this.resourceSearch()\r\n    },\r\n    onResourceSelectChange(selection) {\r\n      this.resourceSelection = selection\r\n    },\r\n    resourceEditClose() {\r\n      this.dialog.isVisible = false\r\n    },\r\n    resourceEditSuccess() {\r\n      this.resourceSearch()\r\n    }\r\n  }\r\n}\r\n",null]}