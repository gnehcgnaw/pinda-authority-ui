{"remainingRequest":"D:\\品达通用权限系统\\资料\\前端工程\\pinda-authority-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\品达通用权限系统\\资料\\前端工程\\pinda-authority-ui\\src\\components\\pinda\\imgUpload.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\品达通用权限系统\\资料\\前端工程\\pinda-authority-ui\\src\\components\\pinda\\imgUpload.vue","mtime":1585207882696},{"path":"D:\\品达通用权限系统\\资料\\前端工程\\pinda-authority-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\品达通用权限系统\\资料\\前端工程\\pinda-authority-ui\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\品达通用权限系统\\资料\\前端工程\\pinda-authority-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\品达通用权限系统\\资料\\前端工程\\pinda-authority-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport db from '@/utils/localstorage'\r\nimport commonApi from '@/api/Common.js'\r\nexport default {\r\n  props: {\r\n    uploadRef: {\r\n      type: String,\r\n      default: 'file1'\r\n    },\r\n    // 是否多选\r\n    multiple: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    // 是否自动上传\r\n    autoUpload: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    // 是否显示上传列表\r\n    showFileList: {\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n    // 最大允许上传个数\r\n    limit: {\r\n      type: Number,\r\n      default: null\r\n    },\r\n    // 允许上传的文件类型\r\n    accept: {\r\n      type: String,\r\n      default: 'image/jpeg, image/gif, image/png, image/bmp'\r\n    },\r\n    // 允许上传的文件大小 单位：字节\r\n    acceptSize: {\r\n      type: Number,\r\n      default: null\r\n    },\r\n    // 默认额外上传数据\r\n    fileOtherData: {\r\n      type: Object,\r\n      default: function() {\r\n        return {\r\n          bizId: '',\r\n          bizType: '',\r\n          isSingle: false\r\n        }\r\n      }\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      imageUrl: '',\r\n      dialogImageUrl: '',\r\n      dialogVisible: false,\r\n      disabled: true,\r\n      // 默认附件列表\r\n      imgFileList: [],\r\n      // 删除附件列表\r\n      removeFileAry: [],\r\n      // 新增附件列表\r\n      addFileAry: [],\r\n      // 是否上传失败\r\n      isUploadError: false,\r\n      fileLength: 0,\r\n      action: `${process.env.VUE_APP_BASE_API}/file/attachment/upload`\r\n    }\r\n  },\r\n  computed: {\r\n    showUploadBtn() {\r\n      return (\r\n        this.showFileList &&\r\n        this.addFileAry.length + this.imgFileList.length === this.limit\r\n      )\r\n    },\r\n    headers() {\r\n      return {\r\n        token: db.get('TOKEN', ''),\r\n        tenant: db.get('TENANT', '')\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    // 附件初始化\r\n    init({ bizId, bizType, imageUrl, isSingle, isDetail }) {\r\n      const vm = this\r\n      vm.fileOtherData.bizId = bizId\r\n      vm.fileOtherData.bizType = bizType\r\n      vm.fileOtherData.isSingle = isSingle || false\r\n      // vm.imgFileList = []\r\n      vm.imgFileList.length = 0\r\n      vm.removeFileAry = []\r\n      vm.addFileAry = []\r\n      vm.imageUrl = imageUrl\r\n      vm.isUploadError = false\r\n      if (isDetail) {\r\n        vm.getAttachment()\r\n      }\r\n    },\r\n    // 附件上传前触发\r\n    beforeUpload() {\r\n      const vm = this\r\n      vm.$store.state.hasLoading = true\r\n    },\r\n    // 文件状态改变时的钩子，添加文件、上传成功和上传失败时都会被调用\r\n    handleChange(file, fileList) {\r\n      const vm = this\r\n      if (file.response) {\r\n        if (file.response.isSuccess) {\r\n          const remoteFile = file.response.data\r\n          vm.fileOtherData.bizId = remoteFile.bizId\r\n          vm.imageUrl = remoteFile.url\r\n          vm.$emit('setId', remoteFile.bizId, remoteFile.url)\r\n        } else {\r\n          vm.$message.error(file.response.msg)\r\n          vm.isUploadError = false\r\n        }\r\n      } else {\r\n        if (vm.acceptSize) {\r\n          const isLtAcceptSize = file.size > vm.acceptSize\r\n          if (isLtAcceptSize) {\r\n            setTimeout(() => {\r\n              vm.$message.error(\r\n                '只能上传' +\r\n                  vm.renderSize(vm.acceptSize) +\r\n                  '的文件!已为您过滤文件：' +\r\n                  file.name\r\n              )\r\n            }, 10)\r\n\r\n            fileList.forEach((item, index) => {\r\n              if (item.uid === file.uid) {\r\n                fileList.splice(index, 1)\r\n              }\r\n            })\r\n          } else {\r\n            if (!vm.isUploadError) {\r\n              vm.addFileAry.push(file.name)\r\n            }\r\n            vm.isUploadError = false\r\n          }\r\n        }\r\n      }\r\n      vm.$store.state.hasLoading = false\r\n    },\r\n    renderSize(value) {\r\n      if (null == value || value == '') {\r\n        return '0 B'\r\n      }\r\n      const unitArr = new Array(\r\n        'B',\r\n        'KB',\r\n        'MB',\r\n        'GB',\r\n        'TB',\r\n        'PB',\r\n        'EB',\r\n        'ZB',\r\n        'YB'\r\n      )\r\n      let index = 0\r\n      let srcsize = parseFloat(value)\r\n      index = Math.floor(Math.log(srcsize) / Math.log(1024))\r\n      let size = srcsize / Math.pow(1024, index)\r\n      size = size.toFixed(2)\r\n      if (unitArr[index]) {\r\n        return size + unitArr[index]\r\n      }\r\n      return '文件太大'\r\n    },\r\n    // 附件上传失败\r\n    handleError() {\r\n      const vm = this\r\n      vm.$message.error('附件上传失败，请重试')\r\n      vm.isUploadError = true\r\n      vm.$store.state.hasLoading = false\r\n      if (!vm.showFileList) {\r\n        vm.imageUrl = ''\r\n      }\r\n    },\r\n    // 查询附件\r\n    async getAttachment() {\r\n      const vm = this\r\n      const res = await commonApi.getAttachment({\r\n        bizIds: vm.fileOtherData.bizId,\r\n        bizTypes: vm.fileOtherData.bizType\r\n      })\r\n      if (res.status === 200) {\r\n        if (res.data.code === 0) {\r\n          if (res.data.data.length > 0) {\r\n            let data = res.data.data[0].list\r\n            data.map(item => {\r\n              item.name = item.submittedFileName\r\n              if (!vm.showFileList) {\r\n                vm.imageUrl = item.url\r\n              }\r\n            })\r\n            vm.imgFileList = data\r\n            vm.$emit('fileLengthVaild', vm.imgFileList.length)\r\n          }\r\n        }\r\n      }\r\n    },\r\n    // 删除附件回调\r\n    handleRemove(file) {\r\n      const vm = this\r\n      if (file.bizId) {\r\n        vm.removeFileAry.push(file.id)\r\n        vm.imgFileList.map((item, index) => {\r\n          if (item.bizId === file.bizId) {\r\n            vm.imgFileList.splice(index, 1)\r\n            return false\r\n          }\r\n        })\r\n      } else {\r\n        vm.addFileAry.map((item, index) => {\r\n          if (item === file.name) {\r\n            vm.addFileAry.splice(index, 1)\r\n            return false\r\n          }\r\n        })\r\n      }\r\n    },\r\n    // 文件超出个数限制时的钩子\r\n    handleExceed() {\r\n      const vm = this\r\n      vm.$message('当前最多允许上传' + vm.limit + '张图片')\r\n    },\r\n    // 返回附件新增及删除数组长度\r\n    handleBack() {\r\n      const vm = this\r\n      return {\r\n        addLength: vm.addFileAry.length,\r\n        removeLength: vm.removeFileAry.length\r\n      }\r\n    },\r\n    // 服务器删除附件\r\n    async deleteAttachment() {\r\n      const vm = this\r\n      const res = await commonApi.deleteAttachment({\r\n        ids: vm.removeFileAry\r\n      })\r\n      if (res.status === 200) {\r\n        if (res.data.code !== 0) {\r\n          vm.$message(res.data.msg)\r\n        }\r\n      }\r\n    },\r\n    // 附件上传服务器触发方法\r\n    submitFile(bizId, bizType, isSingle) {\r\n      const vm = this\r\n      vm.fileOtherData.bizId = bizId\r\n      vm.fileOtherData.bizType = bizType\r\n      vm.fileOtherData.isSingle = isSingle\r\n      if (!vm.showFileList) {\r\n        const length = vm.$refs[vm.uploadRef].uploadFiles.length - 1\r\n        vm.$refs[vm.uploadRef].uploadFiles = [\r\n          vm.$refs[vm.uploadRef].uploadFiles[length]\r\n        ]\r\n        vm.imgFileList.map(item => {\r\n          vm.removeFileAry.push(item.id)\r\n        })\r\n        if (vm.imgFileList.length > 0) {\r\n          vm.deleteAttachment()\r\n        }\r\n      }\r\n      vm.$refs[vm.uploadRef].submit()\r\n      vm.$store.state.hasLoading = false\r\n      vm.addFileAry = []\r\n    },\r\n    // 服务器删除附件\r\n    async deleteAttachmentByIds(ids) {\r\n      const vm = this\r\n      const res = await commonApi.deleteAttachment({\r\n        ids: ids\r\n      })\r\n      if (res.status === 200) {\r\n        if (res.data.code !== 0) {\r\n          vm.$message(res.data.msg)\r\n        } else {\r\n          vm.removeFileAry = []\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",null]}