{"remainingRequest":"D:\\projects\\beike\\pinda-authority-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\projects\\beike\\pinda-authority-ui\\src\\views\\pinda\\sms\\manage\\Edit.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\projects\\beike\\pinda-authority-ui\\src\\views\\pinda\\sms\\manage\\Edit.vue","mtime":1585207882910},{"path":"D:\\projects\\beike\\pinda-authority-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\projects\\beike\\pinda-authority-ui\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\projects\\beike\\pinda-authority-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\projects\\beike\\pinda-authority-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport smsTemplateApi from '@/api/SmsTemplate.js'\r\nimport smsTaskApi from '@/api/SmsTask.js'\r\nimport { validMobile } from '@/utils/my-validate'\r\nimport SendStatusIndex from './SendStatusIndex'\r\n\r\nexport default {\r\n  name: 'SmsTaskEdit',\r\n  components: { SendStatusIndex },\r\n  filters: {\r\n    statusFilter(status) {\r\n      const map = {\r\n        WAITING: 'danger',\r\n        SUCCESS: 'success',\r\n        FAIL: 'error'\r\n      }\r\n      return map[status] || 'success'\r\n    }\r\n  },\r\n  props: {},\r\n  data() {\r\n    return {\r\n      dialog: {\r\n        isVisible: false\r\n      },\r\n      type: 'add',\r\n      smsTask: this.initSmsTask(),\r\n      smsTemplateList: [],\r\n      receiverList: [],\r\n      receiverVisible: false,\r\n      receiver: '',\r\n      timing: false,\r\n      disabled: false,\r\n      smsTemplate: '',\r\n      content: '',\r\n      rules: {\r\n        topic: [\r\n          {\r\n            required: true,\r\n            message: this.$t('rules.require'),\r\n            trigger: 'blur'\r\n          },\r\n          {\r\n            min: 1,\r\n            max: 255,\r\n            message: this.$t('rules.range4to10'),\r\n            trigger: 'blur'\r\n          }\r\n        ],\r\n        templateId: {\r\n          required: true,\r\n          message: this.$t('rules.require'),\r\n          trigger: 'blur'\r\n        },\r\n        sendTime: {\r\n          validator: (rule, value, callback) => {\r\n            const vm = this\r\n            if (vm.timing) {\r\n              if (vm.smsTask.sendTime) {\r\n                callback()\r\n              } else {\r\n                callback('请选择发送日期')\r\n              }\r\n            } else {\r\n              callback()\r\n            }\r\n          },\r\n          trigger: 'change'\r\n        }\r\n      },\r\n      pickerOptions: {\r\n        shortcuts: [\r\n          {\r\n            text: '一小时后',\r\n            onClick(picker) {\r\n              const date = new Date()\r\n              date.setTime(date.getTime() + 3600 * 1000 * 1)\r\n              picker.$emit('pick', date)\r\n            }\r\n          },\r\n          {\r\n            text: '明天',\r\n            onClick(picker) {\r\n              const date = new Date()\r\n              date.setTime(date.getTime() + 3600 * 1000 * 24)\r\n              picker.$emit('pick', date)\r\n            }\r\n          },\r\n          {\r\n            text: '一周后',\r\n            onClick(picker) {\r\n              const date = new Date()\r\n              date.setTime(date.getTime() + 3600 * 1000 * 24 * 7)\r\n              picker.$emit('pick', date)\r\n            }\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  computed: {},\r\n  watch: {\r\n    $route() {\r\n      if (this.$route.path === '/sms/manage') {\r\n        this.initSmsTemplateList()\r\n        this.loadSendStatus()\r\n      }\r\n    }\r\n  },\r\n  mounted() {\r\n    //在vue的mount阶段执行的函数都是顺序执行，不会阻塞的，所以如果希望mount阶段的函数也是阻塞的，需要额外写一个async函数，然后把需要同步执行的函数写到里面，然后在mount阶段调用这个额外写的函数\r\n    this.initSmsTemplateList()\r\n    this.loadSendStatus()\r\n  },\r\n  methods: {\r\n    loadSendStatus() {\r\n      const type = this.$route.query.type\r\n      const id = this.$route.query.id\r\n      if (type === 'view') {\r\n        this.$refs.statusList.setTaskId(id)\r\n      }\r\n    },\r\n    async loadSmsTask() {\r\n      const type = this.$route.query.type\r\n      const id = this.$route.query.id\r\n      this.type = type\r\n      if (type) {\r\n        // 切换到别的页面时，无需重置表单\r\n        // this.smsTask = this.initSmsTask()\r\n        this.reset()\r\n      }\r\n      if (type === 'view') {\r\n        this.disabled = true\r\n      } else {\r\n        this.disabled = false\r\n      }\r\n\r\n      if (id) {\r\n        await smsTaskApi.get(id).then(response => {\r\n          const res = response.data\r\n          this.smsTask = { ...this.smsTask, ...res.data }\r\n          if (type !== 'edit') {\r\n            this.smsTask.id = ''\r\n          }\r\n          this.changeTemplate(this.smsTask.templateId)\r\n          this.receiverList = this.smsTask.receiver.split(',')\r\n\r\n          if (this.smsTask.templateParams) {\r\n            this.smsTask.templateParam = JSON.parse(this.smsTask.templateParams)\r\n          }\r\n          this.smsTask.content = res.data.content\r\n          console.log('查询')\r\n          if (this.smsTask.sendTime) {\r\n            this.timing = true\r\n          } else {\r\n            this.timing = false\r\n          }\r\n\r\n          this.smsTemplate = this.smsTemplateList.find(\r\n            item => item.id === this.smsTask.templateId\r\n          )\r\n        })\r\n      }\r\n    },\r\n    changeTemplate(id) {\r\n      const vm = this\r\n      // vm.preSearch()\r\n      if (id) {\r\n        //遍历模板添加文本框\r\n        for (const item of vm.smsTemplateList) {\r\n          if (item.id === id) {\r\n            let templateParam = {}\r\n            if (typeof item.templateParams == 'string') {\r\n              templateParam = JSON.parse(item.templateParams)\r\n            } else {\r\n              templateParam = item.templateParams\r\n            }\r\n\r\n            for (const prop in templateParam) {\r\n              templateParam[prop] = ''\r\n            }\r\n            vm.smsTemplate = item\r\n            if (vm.type !== 'view') {\r\n              console.log('赋值')\r\n              vm.smsTask.templateParam = templateParam\r\n              // vm.smsTask.content = item.content\r\n              this.content = item.content\r\n            }\r\n            break\r\n          }\r\n        }\r\n        vm.changeContent()\r\n      }\r\n    },\r\n    //模板文本框输入内容\r\n    templateCode(val, key) {\r\n      const vm = this\r\n      vm.smsTask.templateParam[key] = val\r\n      vm.changeContent()\r\n    },\r\n    //短信内容处理\r\n    changeContent() {\r\n      const vm = this\r\n      if (!vm.smsTemplate) {\r\n        return\r\n      }\r\n      const type = vm.smsTemplate.providerType.code\r\n      let content = vm.smsTemplate.content\r\n\r\n      for (const key in vm.smsTask.templateParam) {\r\n        let strs = ''\r\n        if (type == 'TENCENT') {\r\n          strs = '{' + key + '}'\r\n        } else {\r\n          strs = '${' + key + '}'\r\n        }\r\n        if (vm.smsTask.templateParam[key]) {\r\n          content = content.replace(strs, vm.smsTask.templateParam[key])\r\n        }\r\n      }\r\n      if (vm.type !== 'view') {\r\n        console.log('赋值')\r\n        vm.smsTask.content = content\r\n      }\r\n    },\r\n    async initSmsTemplateList() {\r\n      await smsTemplateApi.page({ current: 1, size: 10000 }).then(response => {\r\n        const res = response.data\r\n        if (res.isSuccess) {\r\n          this.smsTemplateList = res.data.records\r\n        }\r\n        console.log('list 加载')\r\n      })\r\n      await this.loadSmsTask() // 顺序不能变\r\n    },\r\n    initSmsTask() {\r\n      return {\r\n        templateId: '',\r\n        receiver: '',\r\n        topic: '',\r\n        templateParam: {},\r\n        sendTime: null,\r\n        content: '',\r\n        draft: false,\r\n        status: {\r\n          code: '',\r\n          desc: ''\r\n        }\r\n      }\r\n    },\r\n    reset() {\r\n      // 先清除校验，再清除表单，不然有奇怪的bug\r\n      this.$refs.form.clearValidate()\r\n      this.$refs.form.resetFields()\r\n      this.smsTask = this.initSmsTask()\r\n      this.receiverList = []\r\n    },\r\n    submitForm(draft) {\r\n      const vm = this\r\n      if (\r\n        vm.smsTask.templateParam &&\r\n        Object.keys(vm.smsTask.templateParam).length > 0\r\n      ) {\r\n        let flag = false\r\n        for (const key in vm.smsTask.templateParam) {\r\n          if (!vm.smsTask.templateParam[key]) {\r\n            flag = true\r\n            break\r\n          }\r\n        }\r\n        if (flag) {\r\n          vm.$message({\r\n            message: '发送内容不能为空',\r\n            type: 'error'\r\n          })\r\n          return\r\n        }\r\n      } else {\r\n        vm.$message({\r\n          message: '发送内容不能为空',\r\n          type: 'error'\r\n        })\r\n        return\r\n      }\r\n\r\n      this.$refs.form.validate(valid => {\r\n        if (valid) {\r\n          vm.editSubmit(draft)\r\n        } else {\r\n          return false\r\n        }\r\n      })\r\n    },\r\n    editSubmit(draft) {\r\n      const vm = this\r\n      vm.smsTask.draft = draft\r\n      vm.smsTask.receiver = vm.receiverList.join(',')\r\n      if (!vm.timing) {\r\n        vm.smsTask.sendTime = null\r\n      }\r\n      if (vm.type === 'edit') {\r\n        vm.update()\r\n      } else {\r\n        vm.save()\r\n      }\r\n    },\r\n    save() {\r\n      const vm = this\r\n      vm.disabled = true\r\n      smsTaskApi.save(vm.smsTask).then(response => {\r\n        vm.disabled = false\r\n        const res = response.data\r\n        if (res.isSuccess) {\r\n          vm.$message({\r\n            message: vm.$t('tips.createSuccess'),\r\n            type: 'success'\r\n          })\r\n          vm.reset()\r\n          vm.$router.push('/sms/manage')\r\n        }\r\n      })\r\n    },\r\n    update() {\r\n      const vm = this\r\n      vm.disabled = true\r\n      smsTaskApi.update(vm.smsTask).then(response => {\r\n        vm.disabled = false\r\n        const res = response.data\r\n        if (res.isSuccess) {\r\n          vm.$message({\r\n            message: vm.$t('tips.createSuccess'),\r\n            type: 'success'\r\n          })\r\n          vm.reset()\r\n          vm.$router.push('/sms/manage')\r\n        }\r\n      })\r\n    },\r\n    handleClose(tag) {\r\n      this.receiverList.splice(this.receiverList.indexOf(tag), 1)\r\n    },\r\n    showInput() {\r\n      this.receiverVisible = true\r\n      this.$nextTick(() => {\r\n        this.$refs.saveTagInput.$refs.input.focus()\r\n      })\r\n    },\r\n    handleInputConfirm() {\r\n      const vm = this\r\n      // 正则校验\r\n      let inputValue = vm.receiver\r\n      if (inputValue) {\r\n        if (!validMobile(inputValue)) {\r\n          this.$message({\r\n            message: '该手机号不合法',\r\n            type: 'error'\r\n          })\r\n          vm.$refs.saveTagInput.focus()\r\n          return\r\n        }\r\n\r\n        if (this.receiverList.indexOf(inputValue) === -1) {\r\n          vm.receiverList.push(inputValue)\r\n          vm.receiverVisible = false\r\n          vm.receiver = ''\r\n        } else {\r\n          this.$message({\r\n            message: '该账号已经存在',\r\n            type: 'error'\r\n          })\r\n          vm.$refs.saveTagInput.focus()\r\n        }\r\n      } else {\r\n        this.receiverVisible = false\r\n      }\r\n    }\r\n  }\r\n}\r\n",null]}