{"remainingRequest":"D:\\projects\\beike\\pinda-authority-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\projects\\beike\\pinda-authority-ui\\src\\views\\pinda\\msgs\\sendMsgs\\Index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\projects\\beike\\pinda-authority-ui\\src\\views\\pinda\\msgs\\sendMsgs\\Index.vue","mtime":1585207882908},{"path":"D:\\projects\\beike\\pinda-authority-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\projects\\beike\\pinda-authority-ui\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\projects\\beike\\pinda-authority-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\projects\\beike\\pinda-authority-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport msgsApi from '@/api/Msgs.js'\r\nimport roleApi from '@/api/Role.js'\r\nimport userApi from '@/api/User.js'\r\nimport Tinymce from '@/components/Tinymce'\r\n\r\nexport default {\r\n  name: 'MsgsEdit',\r\n  components: { Tinymce },\r\n  filters: {},\r\n  props: {},\r\n  data() {\r\n    return {\r\n      allUserList: [],\r\n      allRoleList: [],\r\n      oldChooseUserIdList: [[]],\r\n      oldChooseRoleIdList: [[]],\r\n      dialog: {\r\n        isVisible: false\r\n      },\r\n      type: 'add',\r\n      msgsCenterInfo: this.initMsgsCenterInfo(),\r\n      disabled: false,\r\n      disabledReceiveType: false,\r\n      rules: {\r\n        'msgsCenterInfoDTO.title': [\r\n          {\r\n            required: true,\r\n            message: this.$t('rules.require'),\r\n            trigger: 'blur'\r\n          },\r\n          {\r\n            min: 1,\r\n            max: 255,\r\n            message: '长度在 1 到 255 个字符',\r\n            trigger: 'blur'\r\n          }\r\n        ],\r\n        'msgsCenterInfoDTO.content': [\r\n          {\r\n            required: true,\r\n            message: this.$t('rules.require'),\r\n            trigger: 'blur'\r\n          },\r\n          {\r\n            min: 1,\r\n            max: 65535,\r\n            message: '长度在 1 到 65535 个字符',\r\n            trigger: 'blur'\r\n          }\r\n        ],\r\n        'msgsCenterInfoDTO.msgsCenterType': {\r\n          required: true,\r\n          message: this.$t('rules.require'),\r\n          trigger: 'change'\r\n        },\r\n        roleCodeList: {\r\n          validator: (rule, value, callback) => {\r\n            if (\r\n              this.msgsCenterInfo.receiveType === 'role' &&\r\n              this.msgsCenterInfo.msgsCenterInfoDTO.msgsCenterType.code !==\r\n                'PUBLICITY' &&\r\n              this.msgsCenterInfo.roleCodeList.length <= 0\r\n            ) {\r\n              callback('请选择角色')\r\n            } else {\r\n              callback()\r\n            }\r\n          },\r\n          trigger: 'blur'\r\n        },\r\n        userIdList: {\r\n          validator: (rule, value, callback) => {\r\n            if (\r\n              this.msgsCenterInfo.receiveType === 'user' &&\r\n              this.msgsCenterInfo.msgsCenterInfoDTO.msgsCenterType.code !==\r\n                'PUBLICITY' &&\r\n              this.msgsCenterInfo.userIdList.length <= 0\r\n            ) {\r\n              callback('请选择用户')\r\n            } else {\r\n              callback()\r\n            }\r\n          },\r\n          trigger: 'blur'\r\n        },\r\n        'msgsCenterInfoDTO.handlerUrl': {\r\n          min: 1,\r\n          max: 255,\r\n          message: '长度在 1 到 255 个字符',\r\n          trigger: 'blur'\r\n        }\r\n      }\r\n    }\r\n  },\r\n  computed: {\r\n    enums() {\r\n      return this.$store.state.common.enums\r\n    }\r\n  },\r\n  watch: {\r\n    $route() {\r\n      if (this.$route.path === '/msgs/sendMsgs') {\r\n        this.loadMsgs()\r\n        this.loadUserList()\r\n        this.loadRoleList()\r\n      }\r\n    }\r\n  },\r\n  mounted() {\r\n    this.loadMsgs()\r\n    this.loadUserList()\r\n    this.loadRoleList()\r\n  },\r\n  methods: {\r\n    initMsgsCenterInfo() {\r\n      return {\r\n        userIdList: [],\r\n        roleCodeList: [],\r\n        receiveType: 'user',\r\n        msgsCenterInfoDTO: {\r\n          id: '',\r\n          bizId: '',\r\n          bizType: {\r\n            code: ''\r\n          },\r\n          msgsCenterType: {\r\n            code: ''\r\n          },\r\n          title: '',\r\n          content: '',\r\n          author: '',\r\n          handlerUrl: '',\r\n          handlerParams: '',\r\n          isSingleHandle: true\r\n        }\r\n      }\r\n    },\r\n    loadMsgs() {\r\n      const type = this.$route.query.type\r\n      const id = this.$route.query.id\r\n      this.type = type\r\n      if (type === 'view') {\r\n        msgsApi.get(id).then(response => {\r\n          const res = response.data\r\n          if (res.isSuccess) {\r\n            this.msgsCenterInfo.msgsCenterInfoDTO = res.data\r\n            if (this.msgsCenterInfo.msgsCenterInfoDTO.bizType === null) {\r\n              this.msgsCenterInfo.msgsCenterInfoDTO.bizType = { code: '' }\r\n            }\r\n            if (this.msgsCenterInfo.msgsCenterInfoDTO.msgsCenterType === null) {\r\n              this.msgsCenterInfo.msgsCenterInfoDTO.msgsCenterType = {\r\n                code: ''\r\n              }\r\n            }\r\n          }\r\n        })\r\n      } else {\r\n        this.reset()\r\n      }\r\n    },\r\n    loadUserList() {\r\n      userApi.page({ current: 1, size: 10000 }).then(response => {\r\n        const res = response.data\r\n        if (res.isSuccess) {\r\n          if (res.data.records.length > 0) {\r\n            this.allUserList = [\r\n              ...[{ id: '-1', name: '全选' }],\r\n              ...res.data.records\r\n            ]\r\n          }\r\n        }\r\n      })\r\n    },\r\n    loadRoleList() {\r\n      roleApi.page({ current: 1, size: 10000 }).then(response => {\r\n        const res = response.data\r\n        if (res.isSuccess) {\r\n          if (res.data.records.length > 0) {\r\n            this.allRoleList = [\r\n              ...[{ code: '-1', name: '全选' }],\r\n              ...res.data.records\r\n            ]\r\n          }\r\n        }\r\n      })\r\n    },\r\n    msgsCenterTypeChange(select) {\r\n      if (select === 'PUBLICITY') {\r\n        this.disabledReceiveType = true\r\n      } else {\r\n        this.disabledReceiveType = false\r\n      }\r\n    },\r\n    userSelect(val) {\r\n      //保留所有值\r\n      let allValues = this.allUserList.map(item => item.id)\r\n\r\n      // 用来储存上一次的值，可以进行对比\r\n      const oldVal =\r\n        this.oldChooseUserIdList.length === 1 ? [] : this.oldChooseUserIdList[1]\r\n\r\n      // 若是全部选择\r\n      if (val.includes('-1')) {\r\n        this.msgsCenterInfo.userIdList = allValues\r\n      }\r\n\r\n      // 取消全部选中  上次有 当前没有 表示取消全选\r\n      if (oldVal.includes('-1') && !val.includes('-1')) {\r\n        this.msgsCenterInfo.userIdList = []\r\n      }\r\n\r\n      // 点击非全部选中  需要排除全部选中 以及 当前点击的选项\r\n      // 新老数据都有全部选中\r\n      if (oldVal.includes('-1') && val.includes('-1')) {\r\n        const index = val.indexOf('-1')\r\n        val.splice(index, 1) // 排除全选选项\r\n        this.msgsCenterInfo.userIdList = val\r\n      }\r\n\r\n      //全选未选 但是其他选项全部选上 则全选选上 上次和当前 都没有全选\r\n      if (!oldVal.includes('-1') && !val.includes('-1')) {\r\n        if (val.length === allValues.length - 1) {\r\n          this.msgsCenterInfo.userIdList = ['-1'].concat(val)\r\n        }\r\n      }\r\n\r\n      //储存当前最后的结果 作为下次的老数据\r\n      this.oldChooseUserIdList[1] = this.msgsCenterInfo.userIdList\r\n    },\r\n    roleSelect(val) {\r\n      //保留所有值\r\n      let allValues = this.allRoleList.map(item => item.code)\r\n\r\n      // 用来储存上一次的值，可以进行对比\r\n      const oldVal =\r\n        this.oldChooseRoleIdList.length === 1 ? [] : this.oldChooseRoleIdList[1]\r\n\r\n      // 若是全部选择\r\n      if (val.includes('-1')) {\r\n        this.msgsCenterInfo.roleCodeList = allValues\r\n      }\r\n\r\n      // 取消全部选中  上次有 当前没有 表示取消全选\r\n      if (oldVal.includes('-1') && !val.includes('-1')) {\r\n        this.msgsCenterInfo.roleCodeList = []\r\n      }\r\n\r\n      // 点击非全部选中  需要排除全部选中 以及 当前点击的选项\r\n      // 新老数据都有全部选中\r\n      if (oldVal.includes('-1') && val.includes('-1')) {\r\n        const index = val.indexOf('-1')\r\n        val.splice(index, 1) // 排除全选选项\r\n        this.msgsCenterInfo.roleCodeList = val\r\n      }\r\n\r\n      //全选未选 但是其他选项全部选上 则全选选上 上次和当前 都没有全选\r\n      if (!oldVal.includes('-1') && !val.includes('-1')) {\r\n        if (val.length === allValues.length - 1) {\r\n          this.msgsCenterInfo.roleCodeList = ['-1'].concat(val)\r\n        }\r\n      }\r\n\r\n      //储存当前最后的结果 作为下次的老数据\r\n      this.oldChooseRoleIdList[1] = this.msgsCenterInfo.roleCodeList\r\n    },\r\n    reset() {\r\n      // 先清除校验，再清除表单，不然有奇怪的bug\r\n      this.$refs.form.clearValidate()\r\n      this.$refs.form.resetFields()\r\n      this.msgsCenterInfo = this.initMsgsCenterInfo()\r\n\r\n      //这里报错\r\n      // this.$nextTick(() =>\r\n      //   this.$refs.content.setContent('')\r\n      // )\r\n\r\n      // 设置设置的时间短了 也报错\r\n      setTimeout(() => {\r\n        this.$refs.content.setContent('')\r\n      }, 1000)\r\n    },\r\n    submitForm(draft) {\r\n      const vm = this\r\n      console.log(vm.msgsCenterInfo)\r\n\r\n      this.$refs.form.validate(valid => {\r\n        if (valid) {\r\n          vm.editSubmit(draft)\r\n        } else {\r\n          return false\r\n        }\r\n      })\r\n    },\r\n    editSubmit() {\r\n      const vm = this\r\n      if (vm.type === 'edit') {\r\n        vm.update()\r\n      } else {\r\n        vm.save()\r\n      }\r\n    },\r\n    save() {\r\n      const vm = this\r\n      vm.disabled = true\r\n      msgsApi.save(vm.msgsCenterInfo).then(response => {\r\n        vm.disabled = false\r\n        const res = response.data\r\n        if (res.isSuccess) {\r\n          vm.$message({\r\n            message: vm.$t('tips.createSuccess'),\r\n            type: 'success'\r\n          })\r\n          vm.reset()\r\n          vm.$router.push('/msgs/myMsgs')\r\n        }\r\n      })\r\n    },\r\n    update() {\r\n      const vm = this\r\n      vm.disabled = true\r\n      msgsApi.update(vm.msgs).then(response => {\r\n        vm.disabled = false\r\n        const res = response.data\r\n        if (res.isSuccess) {\r\n          vm.$message({\r\n            message: vm.$t('tips.createSuccess'),\r\n            type: 'success'\r\n          })\r\n          vm.reset()\r\n          vm.$router.push('/msgs/myMsgs')\r\n        }\r\n      })\r\n    }\r\n  }\r\n}\r\n",null]}