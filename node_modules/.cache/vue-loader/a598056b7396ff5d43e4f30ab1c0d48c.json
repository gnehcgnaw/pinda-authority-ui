{"remainingRequest":"D:\\projects\\beike\\pinda-authority-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\projects\\beike\\pinda-authority-ui\\src\\views\\pinda\\file\\attachment\\Index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\projects\\beike\\pinda-authority-ui\\src\\views\\pinda\\file\\attachment\\Index.vue","mtime":1585207882903},{"path":"D:\\projects\\beike\\pinda-authority-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\projects\\beike\\pinda-authority-ui\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\projects\\beike\\pinda-authority-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\projects\\beike\\pinda-authority-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport Pagination from '@/components/Pagination'\r\nimport AttachmentEdit from './Edit'\r\nimport attachmentApi from '@/api/Attachment.js'\r\nimport { renderSize } from '@/utils/utils'\r\nimport { onlinePreview } from '@/settings'\r\n\r\nexport default {\r\n  name: 'AttachmentManage',\r\n  components: { Pagination, AttachmentEdit },\r\n  filters: {},\r\n  data() {\r\n    return {\r\n      dialogVisible: false,\r\n      dialogImageUrl: '',\r\n      dialog: {\r\n        isVisible: false,\r\n        type: 'add'\r\n      },\r\n      tableKey: 0,\r\n      queryParams: {},\r\n      sort: {},\r\n      selection: [],\r\n      // 以下已修改\r\n      loading: false,\r\n      tableData: {\r\n        records: [],\r\n        total: 0\r\n      },\r\n      pagination: {\r\n        size: 10,\r\n        current: 1\r\n      }\r\n    }\r\n  },\r\n  computed: {},\r\n  mounted() {\r\n    this.fetch()\r\n  },\r\n  methods: {\r\n    errorImage() {\r\n      let img = event.srcElement\r\n      img.src = require('@/assets/404_images/404_image.jpeg')\r\n      img.onerror = null //防止闪图\r\n    },\r\n    formatSize(row) {\r\n      return renderSize(row.size)\r\n    },\r\n    filterStatus(value, row) {\r\n      return row.status === value\r\n    },\r\n    editClose() {\r\n      this.dialog.isVisible = false\r\n    },\r\n    editSuccess() {\r\n      this.search()\r\n    },\r\n    onSelectChange(selection) {\r\n      this.selection = selection\r\n    },\r\n    search() {\r\n      this.fetch({\r\n        ...this.queryParams,\r\n        ...this.sort\r\n      })\r\n    },\r\n    reset() {\r\n      this.queryParams = {}\r\n      this.sort = {}\r\n      this.$refs.table.clearSort()\r\n      this.$refs.table.clearFilter()\r\n      this.search()\r\n    },\r\n    singleDownload(row) {\r\n      this.$refs.table.toggleRowSelection(row, true)\r\n      this.batchDownload()\r\n    },\r\n    singleDelete(row) {\r\n      this.$refs.table.toggleRowSelection(row, true)\r\n      this.batchDelete()\r\n    },\r\n    batchDownload() {\r\n      if (!this.selection.length) {\r\n        this.$message({\r\n          message: this.$t('tips.noDataSelected'),\r\n          type: 'warning'\r\n        })\r\n        return\r\n      }\r\n      this.$confirm('确认下载吗？', this.$t('common.tips'), {\r\n        confirmButtonText: this.$t('common.confirm'),\r\n        cancelButtonText: this.$t('common.cancel'),\r\n        type: 'warning'\r\n      })\r\n        .then(() => {\r\n          const ids = []\r\n          this.selection.forEach(u => {\r\n            ids.push(u.id)\r\n          })\r\n          this.download(ids)\r\n        })\r\n        .catch(() => {\r\n          this.clearSelections()\r\n        })\r\n    },\r\n    batchDelete() {\r\n      if (!this.selection.length) {\r\n        this.$message({\r\n          message: this.$t('tips.noDataSelected'),\r\n          type: 'warning'\r\n        })\r\n        return\r\n      }\r\n      this.$confirm(this.$t('tips.confirmDelete'), this.$t('common.tips'), {\r\n        confirmButtonText: this.$t('common.confirm'),\r\n        cancelButtonText: this.$t('common.cancel'),\r\n        type: 'warning'\r\n      })\r\n        .then(() => {\r\n          const ids = []\r\n          this.selection.forEach(u => {\r\n            ids.push(u.id)\r\n          })\r\n          this.delete(ids)\r\n        })\r\n        .catch(() => {\r\n          this.clearSelections()\r\n        })\r\n    },\r\n    clearSelections() {\r\n      this.$refs.table.clearSelection()\r\n    },\r\n    download(ids) {\r\n      attachmentApi.download({ ids: ids }).then(response => {\r\n        const res = response.data\r\n        const type = res.type\r\n        if (type.includes('application/json')) {\r\n          let reader = new FileReader()\r\n          reader.onload = e => {\r\n            if (e.target.readyState === 2) {\r\n              let data = JSON.parse(e.target.result)\r\n              this.$message({\r\n                message: data.msg,\r\n                type: 'warning'\r\n              })\r\n            }\r\n          }\r\n          reader.readAsText(res)\r\n        } else {\r\n          let disposition = response.headers['content-disposition']\r\n          let fileName = '下载文件.zip'\r\n          if (disposition) {\r\n            let respcds = disposition.split(';')\r\n            for (let i = 0; i < respcds.length; i++) {\r\n              let header = respcds[i]\r\n              if (header !== null && header !== '') {\r\n                let headerValue = header.split('=')\r\n                if (headerValue !== null && headerValue.length > 0) {\r\n                  if (headerValue[0].toLowerCase() === 'filename') {\r\n                    fileName = decodeURI(headerValue[1])\r\n                    break\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n          let blob = new Blob([res])\r\n          let link = document.createElement('a')\r\n          link.href = window.URL.createObjectURL(blob)\r\n          link.download = fileName\r\n          link.click()\r\n          window.URL.revokeObjectURL(link.href)\r\n        }\r\n\r\n        this.clearSelections()\r\n      })\r\n    },\r\n    delete(ids) {\r\n      attachmentApi.delete({ ids: ids }).then(response => {\r\n        const res = response.data\r\n        if (res.isSuccess) {\r\n          this.$message({\r\n            message: this.$t('tips.deleteSuccess'),\r\n            type: 'success'\r\n          })\r\n        }\r\n        this.search()\r\n      })\r\n    },\r\n    onView(row) {\r\n      if (row.url) {\r\n        window.open(onlinePreview + encodeURIComponent(row.url))\r\n      }\r\n    },\r\n    upload() {\r\n      this.dialog.type = 'upload'\r\n      this.dialog.isVisible = true\r\n      this.$refs.edit.setAttachment(false)\r\n    },\r\n    edit(row) {\r\n      this.$refs.edit.setAttachment(row)\r\n      this.dialog.type = 'edit'\r\n      this.dialog.isVisible = true\r\n    },\r\n    fetch(params = {}) {\r\n      this.loading = true\r\n      params.size = this.pagination.size\r\n      params.current = this.pagination.current\r\n      if (this.queryParams.timeRange) {\r\n        params.startCreateTime = this.queryParams.timeRange[0]\r\n        params.endCreateTime = this.queryParams.timeRange[1]\r\n      }\r\n      attachmentApi\r\n        .page(params)\r\n        .then(response => {\r\n          const res = response.data\r\n          this.loading = false\r\n          if (res.isSuccess) {\r\n            this.tableData = res.data\r\n          }\r\n        })\r\n        .catch(() => {\r\n          this.loading = false\r\n        })\r\n    },\r\n    sortChange(val) {\r\n      this.sort.field = val.prop\r\n      this.sort.order = val.order\r\n      this.search()\r\n    }\r\n  }\r\n}\r\n",null]}