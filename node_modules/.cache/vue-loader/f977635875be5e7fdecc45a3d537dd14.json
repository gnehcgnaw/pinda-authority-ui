{"remainingRequest":"D:\\品达通用权限系统\\资料\\前端工程\\pinda-authority-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\品达通用权限系统\\资料\\前端工程\\pinda-authority-ui\\src\\views\\febs\\system\\client\\Edit.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\品达通用权限系统\\资料\\前端工程\\pinda-authority-ui\\src\\views\\febs\\system\\client\\Edit.vue","mtime":1585207882836},{"path":"D:\\品达通用权限系统\\资料\\前端工程\\pinda-authority-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\品达通用权限系统\\资料\\前端工程\\pinda-authority-ui\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\品达通用权限系统\\资料\\前端工程\\pinda-authority-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\品达通用权限系统\\资料\\前端工程\\pinda-authority-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport { isIntegerGreaterThanZero, validURL } from '@/utils/my-validate'\r\n\r\nexport default {\r\n  name: 'ClientEdit',\r\n  props: {\r\n    dialogVisible: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    title: {\r\n      type: String,\r\n      default: ''\r\n    },\r\n    type: {\r\n      type: String,\r\n      default: ''\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      screenWidth: 0,\r\n      width: this.initWidth(),\r\n      client: this.initClient(),\r\n      rules: {\r\n        clientId: [\r\n          { required: true, message: this.$t('rules.require'), trigger: 'blur' },\r\n          { min: 3, max: 20, message: this.$t('rules.range3to20'), trigger: 'blur' },\r\n          { validator: (rule, value, callback) => {\r\n            if (this.type === 'add') {\r\n              this.$get(`auth/client/check/${value}`).then((r) => {\r\n                if (!r.data) {\r\n                  callback(this.$t('rules.clientIdExist'))\r\n                } else {\r\n                  callback()\r\n                }\r\n              })\r\n            } else {\r\n              callback()\r\n            }\r\n          }, trigger: 'blur' }\r\n        ],\r\n        scope: [\r\n          { max: 100, message: this.$t('rules.noMoreThan100'), trigger: 'blur' },\r\n          { required: true, message: this.$t('rules.require'), trigger: 'blur' }\r\n        ],\r\n        webServerRedirectUri: { validator: (rule, value, callback) => {\r\n          if (value !== '' && value != null && !validURL(value)) {\r\n            callback(new Error(this.$t('rules.invalidURL')))\r\n          } else {\r\n            callback()\r\n          }\r\n        }, trigger: 'blur' },\r\n        clientSecret: [\r\n          { required: true, message: this.$t('rules.require'), trigger: 'blur' },\r\n          { min: 6, max: 20, message: this.$t('rules.range6to20'), trigger: 'blur' }\r\n        ],\r\n        accessTokenValidity: [\r\n          { required: true, message: this.$t('rules.require'), trigger: 'blur' },\r\n          { validator: (rule, value, callback) => {\r\n            if (!isIntegerGreaterThanZero(value)) {\r\n              callback(new Error(this.$t('rules.invalidInteger')))\r\n            } else if (value.toString().length > 11) {\r\n              callback(new Error(this.$t('rules.noMoreThan11')))\r\n            } else {\r\n              callback()\r\n            }\r\n          }, trigger: 'blur' }\r\n        ],\r\n        refreshTokenValidity: [\r\n          { validator: (rule, value, callback) => {\r\n            if (value === null || value === '') {\r\n              callback()\r\n            } else if (!isIntegerGreaterThanZero(value)) {\r\n              callback(new Error(this.$t('rules.invalidInteger')))\r\n            } else if (value.toString().length > 11) {\r\n              callback(new Error(this.$t('rules.noMoreThan11')))\r\n            } else {\r\n              callback()\r\n            }\r\n          }, trigger: 'blur' }\r\n        ],\r\n        authorizedGrantTypes: { required: true, message: this.$t('rules.require'), trigger: 'blur' }\r\n      },\r\n      grantTypes: [\r\n        { type: 'refresh_token' },\r\n        { type: 'authorization_code' },\r\n        { type: 'client_credentials' },\r\n        { type: 'password' },\r\n        { type: 'implicit' }\r\n      ]\r\n    }\r\n  },\r\n  computed: {\r\n    isVisible: {\r\n      get() {\r\n        return this.dialogVisible\r\n      },\r\n      set() {\r\n        this.close()\r\n        this.reset()\r\n      }\r\n    }\r\n  },\r\n  mounted() {\r\n    window.onresize = () => {\r\n      return (() => {\r\n        this.width = this.initWidth()\r\n      })()\r\n    }\r\n  },\r\n  methods: {\r\n    initWidth() {\r\n      this.screenWidth = document.body.clientWidth\r\n      if (this.screenWidth < 991) {\r\n        return '90%'\r\n      } else if (this.screenWidth < 1400) {\r\n        return '45%'\r\n      } else {\r\n        return '800px'\r\n      }\r\n    },\r\n    initClient() {\r\n      return {\r\n        clientId: '',\r\n        resourceIds: '',\r\n        clientSecret: '',\r\n        scope: '',\r\n        authorizedGrantTypes: '',\r\n        webServerRedirectUri: '',\r\n        accessTokenValidity: null,\r\n        refreshTokenValidity: null,\r\n        autoapprove: ''\r\n      }\r\n    },\r\n    setClient(val) {\r\n      this.client = { ...val }\r\n      let authorizedGrantTypes = []\r\n      if (this.client.authorizedGrantTypes && typeof this.client.authorizedGrantTypes === 'string') {\r\n        authorizedGrantTypes = this.client.authorizedGrantTypes.split(',')\r\n        this.client.authorizedGrantTypes = authorizedGrantTypes\r\n      }\r\n      this.client.clientSecret = '******'\r\n      this.client.autoapprove = this.client.autoapprove !== null ? this.client.autoapprove + '' : ''\r\n    },\r\n    submitForm() {\r\n      this.$refs.form.validate((valid) => {\r\n        if (valid) {\r\n          if (this.type === 'add') {\r\n            // create\r\n            this.client.authorizedGrantTypes = this.client.authorizedGrantTypes.join(',')\r\n            this.$post('auth/client', { ...this.client }).then(() => {\r\n              this.isVisible = false\r\n              this.$message({\r\n                message: this.$t('tips.createSuccess'),\r\n                type: 'success'\r\n              })\r\n              this.$emit('success')\r\n            })\r\n          } else {\r\n            // update\r\n            this.client.authorizedGrantTypes = this.client.authorizedGrantTypes.join(',')\r\n            this.$put('auth/client', { ...this.client }).then(() => {\r\n              this.isVisible = false\r\n              this.$message({\r\n                message: this.$t('tips.updateSuccess'),\r\n                type: 'success'\r\n              })\r\n              this.$emit('success')\r\n            })\r\n          }\r\n        } else {\r\n          return false\r\n        }\r\n      })\r\n    },\r\n    close() {\r\n      this.$emit('close')\r\n    },\r\n    reset() {\r\n      this.$refs.form.clearValidate()\r\n      this.$refs.form.resetFields()\r\n      this.client = this.initClient()\r\n    }\r\n  }\r\n}\r\n",null]}