{"remainingRequest":"D:\\projects\\beike\\pinda-authority-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\projects\\beike\\pinda-authority-ui\\src\\views\\login\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\projects\\beike\\pinda-authority-ui\\src\\views\\login\\index.vue","mtime":1585211796606},{"path":"D:\\projects\\beike\\pinda-authority-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\projects\\beike\\pinda-authority-ui\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\projects\\beike\\pinda-authority-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\projects\\beike\\pinda-authority-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport db from '@/utils/localstorage'\r\nimport { randomNum } from '@/utils'\r\nimport { socialLoginUrl } from '@/settings'\r\nimport loginApi from '@/api/Login.js'\r\nimport commonApi from '@/api/Common.js'\r\n\r\nexport default {\r\n  name: 'Login',\r\n  data() {\r\n    return {\r\n      //是否启用多租户\r\n      isMultiTenant:\r\n        process.env.VUE_APP_IS_MULTI_TENANT === 'true' ? true : false,\r\n      tabActiveName: 'bindLogin',\r\n      login: {\r\n        type: 'up'\r\n      },\r\n      logo: [\r\n        { img: 'gitee.png', name: 'gitee', radius: true },\r\n        { img: 'github.png', name: 'github', radius: true },\r\n        { img: 'tencent_cloud.png', name: 'tencent_cloud', radius: true },\r\n        { img: 'qq.png', name: 'qq', radius: false },\r\n        { img: 'dingtalk.png', name: 'dingtalk', radius: true },\r\n        { img: 'microsoft.png', name: 'microsoft', radius: false }\r\n      ],\r\n      loginForm: {\r\n        account: '',\r\n        password: '',\r\n        tenant: '0000',\r\n        bindAccount: '',\r\n        bindPassword: '',\r\n        signAccount: '',\r\n        signPassword: ''\r\n      },\r\n      rules: {\r\n        account: {\r\n          required: true,\r\n          message: this.$t('rules.require'),\r\n          trigger: 'blur'\r\n        },\r\n        tenant: {\r\n          required: true,\r\n          message: this.$t('rules.require'),\r\n          trigger: 'blur'\r\n        },\r\n        password: {\r\n          required: true,\r\n          message: this.$t('rules.require'),\r\n          trigger: 'blur'\r\n        },\r\n        code: {\r\n          required: true,\r\n          message: this.$t('rules.require'),\r\n          trigger: 'blur'\r\n        },\r\n        bindAccount: {\r\n          required: true,\r\n          message: this.$t('rules.require'),\r\n          trigger: 'blur'\r\n        },\r\n        bindPassword: {\r\n          required: true,\r\n          message: this.$t('rules.require'),\r\n          trigger: 'blur'\r\n        },\r\n        signAccount: [\r\n          {\r\n            required: true,\r\n            message: this.$t('rules.require'),\r\n            trigger: 'blur'\r\n          },\r\n          {\r\n            min: 4,\r\n            max: 10,\r\n            message: this.$t('rules.range4to10'),\r\n            trigger: 'blur'\r\n          }\r\n        ],\r\n        signPassword: [\r\n          {\r\n            required: true,\r\n            message: this.$t('rules.require'),\r\n            trigger: 'blur'\r\n          },\r\n          {\r\n            min: 6,\r\n            max: 20,\r\n            message: this.$t('rules.range6to20'),\r\n            trigger: 'blur'\r\n          }\r\n        ]\r\n      },\r\n      authUser: null,\r\n      loading: false,\r\n      showDialog: false,\r\n      redirect: undefined,\r\n      otherQuery: {},\r\n      randomId: randomNum(24, 16),\r\n      imageCode: '',\r\n      page: {\r\n        width: window.screen.width * 0.5,\r\n        height: window.screen.height * 0.5\r\n      }\r\n    }\r\n  },\r\n  created() {},\r\n  mounted() {\r\n    db.clear()\r\n    this.getCodeImage()\r\n  },\r\n  destroyed() {\r\n    window.removeEventListener('message', this.resolveSocialLogin)\r\n  },\r\n  methods: {\r\n    getCodeImage() {\r\n      loginApi\r\n        .getCaptcha(this.randomId)\r\n        .then(response => {\r\n          const res = response.data\r\n          if (res.byteLength <= 100) {\r\n            this.$message({\r\n              message: this.$t('tips.systemError'),\r\n              type: 'error'\r\n            })\r\n          }\r\n          return (\r\n            'data:image/png;base64,' +\r\n            btoa(\r\n              new Uint8Array(res).reduce(\r\n                (data, byte) => data + String.fromCharCode(byte),\r\n                ''\r\n              )\r\n            )\r\n          )\r\n        })\r\n        .then(res => {\r\n          this.imageCode = res\r\n        })\r\n        .catch(e => {\r\n          if (e.toString().indexOf('429') !== -1) {\r\n            this.$message({\r\n              message: this.$t('tips.tooManyRequest'),\r\n              type: 'error'\r\n            })\r\n          } else {\r\n            this.$message({\r\n              message: this.$t('tips.getCodeImageFailed'),\r\n              type: 'error'\r\n            })\r\n          }\r\n        })\r\n    },\r\n    handleTabClick(tab) {\r\n      this.tabActiveName = tab.name\r\n    },\r\n    resolveLogo(logo) {\r\n      return require(`@/assets/logo/${logo}`)\r\n    },\r\n    socialLogin(oauthType) {\r\n      const url = `${socialLoginUrl}/${oauthType}/login`\r\n      window.open(\r\n        url,\r\n        'newWindow',\r\n        `resizable=yes, height=${this.page.height}, width=${this.page.width}, top=10%, left=10%, toolbar=no, menubar=no, scrollbars=no, resizable=no,location=no, status=no`\r\n      )\r\n      window.addEventListener('message', this.resolveSocialLogin, false)\r\n    },\r\n    resolveSocialLogin(e) {\r\n      const data = e.data\r\n      const that = this\r\n      if (data.message === 'not_bind') {\r\n        that.login.type = 'bind'\r\n        const authUser = data.data\r\n        that.authUser = authUser\r\n        that\r\n          .$confirm(\r\n            that.$t('common.current') +\r\n              authUser.source +\r\n              that.$t('common.socialAccount') +\r\n              authUser.nickname +\r\n              that.$t('common.socialTips'),\r\n            that.$t('common.tips'),\r\n            {\r\n              confirmButtonText: that.$t('common.signLogin'),\r\n              cancelButtonText: that.$t('common.bindLogin'),\r\n              type: 'warning'\r\n            }\r\n          )\r\n          .then(() => {\r\n            that.tabActiveName = 'signLogin'\r\n          })\r\n          .catch(() => {\r\n            that.tabActiveName = 'bindLogin'\r\n          })\r\n      } else if (data.message === 'social_login_success') {\r\n        that.saveLoginData(data.data)\r\n        that.getUserDetailInfo()\r\n        that.loginSuccessCallback(data.account)\r\n      } else {\r\n        // do nothing\r\n      }\r\n    },\r\n    bindLogin() {\r\n      let account_c = false\r\n      let password_c = false\r\n      this.$refs.loginForm.validateField('bindAccount', e => {\r\n        if (!e) {\r\n          account_c = true\r\n        }\r\n      })\r\n      this.$refs.loginForm.validateField('bindPassword', e => {\r\n        if (!e) {\r\n          password_c = true\r\n        }\r\n      })\r\n      if (account_c && password_c) {\r\n        this.loading = true\r\n        const that = this\r\n        const params = {\r\n          bindAccount: that.loginForm.bindAccount,\r\n          bindPassword: that.loginForm.bindPassword,\r\n          ...that.authUser\r\n        }\r\n        params.token = null\r\n        that\r\n          .$post('auth/social/bind/login', params)\r\n          .then(r => {\r\n            const data = r.data.data\r\n            this.saveLoginData(data)\r\n            this.getUserDetailInfo()\r\n            this.loginSuccessCallback(that.loginForm.bindAccount)\r\n          })\r\n          .catch(error => {\r\n            console.error(error)\r\n            that.loading = false\r\n          })\r\n      }\r\n    },\r\n    signLogin() {\r\n      let account_c = false\r\n      let password_c = false\r\n      this.$refs.loginForm.validateField('signAccount', e => {\r\n        if (!e) {\r\n          account_c = true\r\n        }\r\n      })\r\n      this.$refs.loginForm.validateField('signPassword', e => {\r\n        if (!e) {\r\n          password_c = true\r\n        }\r\n      })\r\n      if (account_c && password_c) {\r\n        this.loading = true\r\n        const that = this\r\n        const params = {\r\n          bindAccount: that.loginForm.signAccount,\r\n          bindPassword: that.loginForm.signPassword,\r\n          ...that.authUser\r\n        }\r\n        params.token = null\r\n        that\r\n          .$post('auth/social/sign/login', params)\r\n          .then(r => {\r\n            const data = r.data.data\r\n            this.saveLoginData(data)\r\n            this.getUserDetailInfo()\r\n            this.loginSuccessCallback(that.loginForm.signAccount)\r\n          })\r\n          .catch(error => {\r\n            console.error(error)\r\n            that.loading = false\r\n          })\r\n      }\r\n    },\r\n    handleLogin() {\r\n      let account_c = false\r\n      let password_c = false\r\n      let tenant_c = false\r\n      let code_c = false\r\n      this.$refs.loginForm.validateField('tenant', e => {\r\n        if (!e) {\r\n          tenant_c = true\r\n        }\r\n      })\r\n      this.$refs.loginForm.validateField('account', e => {\r\n        if (!e) {\r\n          account_c = true\r\n        }\r\n      })\r\n      this.$refs.loginForm.validateField('password', e => {\r\n        if (!e) {\r\n          password_c = true\r\n        }\r\n      })\r\n      this.$refs.loginForm.validateField('code', e => {\r\n        if (!e) {\r\n          code_c = true\r\n        }\r\n      })\r\n      if (account_c && password_c && code_c && tenant_c) {\r\n        this.loading = true\r\n        const that = this\r\n        that.loginForm['key'] = that.randomId\r\n        loginApi.login(this.loginForm).then(response => {\r\n          const res = response.data\r\n          //debugger;\r\n          if (res.isSuccess) {\r\n            that.saveLoginData(res.data.token)\r\n            that.saveUserInfo(res.data.user, res.data.permissionsList)\r\n\r\n            that.loginSuccessCallback(res.data.user)\r\n            loginApi.loginLog(\r\n              res.data.user.account,\r\n              this.$t('tips.loginSuccess')\r\n            )\r\n            that.$message({\r\n              message: this.$t('tips.loginSuccess'),\r\n              type: 'success'\r\n            })\r\n            that.loading = false\r\n            that.$router.push('/')\r\n          } else {\r\n            that.loading = false\r\n            that.getCodeImage()\r\n\r\n            this.$store.commit('account/setTenant', this.loginForm.tenant)\r\n            loginApi.loginLog(that.loginForm.account, res.msg)\r\n          }\r\n        })\r\n      }\r\n    },\r\n    saveLoginData(token) {\r\n      this.$store.commit('account/setTenant', this.loginForm.tenant)\r\n      this.$store.commit('account/setToken', token.token)\r\n      const current = new Date()\r\n      const expireTime = current.setTime(\r\n        current.getTime() + 1000 * token.expire\r\n      )\r\n      this.$store.commit('account/setExpireTime', expireTime)\r\n    },\r\n    saveUserInfo(user, permissionsList) {\r\n      this.$store.commit('account/setUser', user)\r\n      // TODO 从后台拉取权限列表\r\n      // const permissions = [\r\n      //   \"org:view\",\r\n      //   \"org:add\",\r\n      //   \"org:update\",\r\n      //   \"org:delete\",\r\n      //   \"org:export\",\r\n      //   \"user:view\",\r\n      //   \"user:add\",\r\n      //   \"user:update\",\r\n      //   \"user:delete\",\r\n      //   \"user:reset\",\r\n      //   \"user:export\",\r\n      //   \"station:view\",\r\n      //   \"station:add\",\r\n      //   \"station:update\",\r\n      //   \"station:delete\",\r\n      //   \"station:export\",\r\n      //   \"menu:view\",\r\n      //   \"menu:add\",\r\n      //   \"menu:update\",\r\n      //   \"menu:delete\",\r\n      //   \"menu:export\",\r\n      //   \"resource:view\",\r\n      //   \"resource:add\",\r\n      //   \"resource:update\",\r\n      //   \"resource:delete\",\r\n      //   \"resource:export\",\r\n      //   \"role:view\",\r\n      //   \"role:add\",\r\n      //   \"role:update\",\r\n      //   \"role:delete\",\r\n      //   \"role:export\",\r\n      //   \"role:auth\",\r\n      //   \"role:config\",\r\n      //   \"client:view\",\r\n      //   \"client:add\",\r\n      //   \"client:decrypt\",\r\n      //   \"log:view\",\r\n      //   \"log:export\",\r\n      //   \"monitor:loginlog\",\r\n      //   \"loginlog:export\",\r\n      //   \"monitor:register\",\r\n      //   \"monitor:zipkin\",\r\n      //   \"monitor:kibana\",\r\n      //   \"mobitor:admin\",\r\n      //   \"monitor:swagger\",\r\n      //   \"grafana:view\",\r\n      //   \"gen:config\",\r\n      //   \"gen:generate\",\r\n      //   \"gen:generate:gen\",\r\n      //   \"others:eximport\"\r\n      // ]\r\n      this.$store.commit('account/setPermissions', permissionsList)\r\n    },\r\n    loginSuccessCallback(user) {\r\n      console.log(user)\r\n\t  return ;\r\n      // 登录成功后的回调，记录登录日志，最后登录时间等\r\n      // this.$get(`system/user/success/${account}`).catch((e) => { console.log(e) })\r\n      commonApi.dictionaryEnums().then(response => {\r\n        const res = response.data\r\n        if (res.isSuccess) {\r\n          this.$store.commit('common/setEnums', res.data)\r\n        }\r\n      })\r\n    }\r\n  }\r\n}\r\n",null]}