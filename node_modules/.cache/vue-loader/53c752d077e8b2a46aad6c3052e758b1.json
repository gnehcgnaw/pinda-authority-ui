{"remainingRequest":"D:\\projects\\beike\\pinda-authority-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\projects\\beike\\pinda-authority-ui\\src\\views\\pinda\\auth\\role\\RoleAuthority - 副本.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\projects\\beike\\pinda-authority-ui\\src\\views\\pinda\\auth\\role\\RoleAuthority - 副本.vue","mtime":1585207882871},{"path":"D:\\projects\\beike\\pinda-authority-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\projects\\beike\\pinda-authority-ui\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\projects\\beike\\pinda-authority-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\projects\\beike\\pinda-authority-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport roleApi from '@/api/Role.js'\r\nimport menuApi from '@/api/Menu.js'\r\nimport resourceApi from '@/api/Resource.js'\r\n\r\nexport default {\r\n  name: 'RoleAuthorityEdit',\r\n  components: {},\r\n  props: {\r\n    dialogVisible: {\r\n      type: Boolean,\r\n      default: false\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      roleAuthority: this.initRoleAuthority(),\r\n      screenWidth: 0,\r\n      width: this.initWidth(),\r\n      menuTree: [],\r\n      resourceList: [],\r\n      rules: {},\r\n      tableKey: 0,\r\n      loading: false,\r\n      tableData: {\r\n        total: 0\r\n      },\r\n      selection: [],\r\n      disabled: false,\r\n      isIndeterminate: false,\r\n      checkedMenu: false\r\n    }\r\n  },\r\n  computed: {\r\n    isVisible: {\r\n      get() {\r\n        return this.dialogVisible\r\n      },\r\n      set() {\r\n        this.close()\r\n        this.reset()\r\n      }\r\n    },\r\n    title() {\r\n      return '配置菜单资源'\r\n    }\r\n  },\r\n  watch: {},\r\n  mounted() {\r\n    this.initMenuTree()\r\n    window.onresize = () => {\r\n      return (() => {\r\n        this.width = this.initWidth()\r\n      })()\r\n    }\r\n  },\r\n  methods: {\r\n    allMenuIdList() {\r\n      const menuIdList = []\r\n      this.getMenuIdList(this.menuTree, menuIdList)\r\n      return menuIdList\r\n    },\r\n    getMenuIdList(menuList, menuIdList) {\r\n      if (menuList) {\r\n        menuList.forEach(item => {\r\n          menuIdList.push(item.id)\r\n          if (item.children && item.children.length > 0) {\r\n            this.getMenuIdList(item.children, menuIdList)\r\n          }\r\n        })\r\n      }\r\n    },\r\n    checkedAll() {\r\n      if (this.checkedMenu) {\r\n        //全选\r\n        this.$refs.menuTree.setCheckedKeys(this.allMenuIdList())\r\n        this.isIndeterminate = false\r\n      } else {\r\n        //取消选中\r\n        this.$refs.menuTree.setCheckedKeys([])\r\n        this.isIndeterminate = false\r\n      }\r\n    },\r\n    nodeClick(data) {\r\n      const vm = this\r\n      vm.loading = true\r\n\r\n      resourceApi\r\n        .page({ current: 1, size: 10000, menuId: data.id })\r\n        .then(response => {\r\n          const res = response.data\r\n          vm.tableData = res.data\r\n          vm.loading = false\r\n          vm.displayTable()\r\n        })\r\n    },\r\n    displayTable() {\r\n      const vm = this\r\n      vm.tableData.records.forEach(item => {\r\n        vm.roleAuthority.resourceIdList.forEach(resourceId => {\r\n          if (item.id === resourceId) {\r\n            vm.$refs.table.toggleRowSelection(item, true)\r\n          }\r\n        })\r\n      })\r\n    },\r\n    onAllSelect(selection) {\r\n      this.onSelect(selection)\r\n    },\r\n    onSelect(selection) {\r\n      this.roleAuthority.resourceIdList = selection.map(item => item.id)\r\n      this.selection = selection\r\n      const old = this.$refs.menuTree.getCheckedKeys()\r\n      const must = selection.map(item => item.menuId)\r\n      const newSelected = Array.from(new Set([...old, ...must]))\r\n      this.$refs.menuTree.setCheckedKeys(newSelected)\r\n      newSelected.forEach(item => {\r\n        this.selectedParent(item)\r\n      })\r\n    },\r\n    initMenuTree() {\r\n      menuApi.allTree().then(response => {\r\n        const res = response.data\r\n        this.menuTree = res.data\r\n      })\r\n    },\r\n    initRoleAuthority() {\r\n      return {\r\n        roleId: '',\r\n        menuIdList: [],\r\n        resourceIdList: []\r\n      }\r\n    },\r\n    initWidth() {\r\n      this.screenWidth = document.body.clientWidth\r\n      if (this.screenWidth < 991) {\r\n        return '90%'\r\n      } else if (this.screenWidth < 1400) {\r\n        return '45%'\r\n      } else {\r\n        return '1000px'\r\n      }\r\n    },\r\n    setRoleAuthority(val) {\r\n      const vm = this\r\n      vm.roleAuthority.roleId = val.id\r\n      // vm.disabled = val.readonly\r\n      roleApi.findAuthorityIdByRoleId(val.id).then(response => {\r\n        const res = response.data\r\n        vm.roleAuthority.menuIdList = res.data.menuIdList\r\n        vm.roleAuthority.resourceIdList = res.data.resourceIdList\r\n        vm.$refs.menuTree.setCheckedKeys(res.data.menuIdList)\r\n        res.data.menuIdList.forEach(item => {\r\n          vm.selectedParent(item)\r\n        })\r\n      })\r\n    },\r\n    close() {\r\n      this.$emit('close')\r\n    },\r\n    reset() {\r\n      // 先清除校验，再清除表单，不然有奇怪的bug\r\n      this.$refs.form.clearValidate()\r\n      this.$refs.form.resetFields()\r\n      this.roleAuthority = this.initRoleAuthority()\r\n      this.$refs.menuTree.setCheckedKeys([])\r\n      this.$refs.table.clearSelection()\r\n    },\r\n    submitForm() {\r\n      const vm = this\r\n      this.$refs.form.validate(valid => {\r\n        if (valid) {\r\n          vm.editSubmit()\r\n        } else {\r\n          return false\r\n        }\r\n      })\r\n    },\r\n    editSubmit() {\r\n      const vm = this\r\n\r\n      this.roleAuthority.menuIdList = vm.$refs.menuTree\r\n        .getHalfCheckedKeys()\r\n        .concat(vm.$refs.menuTree.getCheckedKeys())\r\n      this.roleAuthority.resourceIdList = vm.selection.map(item => item.id)\r\n\r\n      roleApi.saveRoleAuthority(this.roleAuthority).then(response => {\r\n        const res = response.data\r\n        if (res.isSuccess) {\r\n          vm.isVisible = false\r\n          vm.$message({\r\n            message: vm.$t('tips.createSuccess'),\r\n            type: 'success'\r\n          })\r\n          vm.$emit('success')\r\n        }\r\n      })\r\n    },\r\n    checkMenu(data, node) {\r\n      if (node.checkedKeys.length === 0) {\r\n        //取消\r\n        this.checkedMenu = false\r\n        this.isIndeterminate = false\r\n      } else if (node.checkedKeys.length === this.allMenuIdList().length) {\r\n        //全选\r\n        this.checkedMenu = true\r\n        this.isIndeterminate = false\r\n      } else {\r\n        // 中立\r\n        this.checkedMenu = false\r\n        this.isIndeterminate = true\r\n      }\r\n\r\n      // 用于：父子节点严格互不关联时，父节点勾选变化时通知子节点同步变化，实现单向关联。\r\n      let selected = node.checkedKeys.indexOf(data.id) // -1未选中\r\n      // 选中\r\n      if (selected !== -1) {\r\n        // 子节点只要被选中父节点就被选中\r\n        this.selectedParent(data)\r\n        // 统一处理子节点为相同的勾选状态\r\n        this.uniteChildSame(data, true)\r\n      } else {\r\n        // 未选中 处理子节点全部未选中\r\n        if (data.children && data.children.length !== 0) {\r\n          this.uniteChildSame(data, false)\r\n        }\r\n      }\r\n    },\r\n    // 统一处理子节点为相同的勾选状态\r\n    uniteChildSame(data, isSelected) {\r\n      this.$refs.menuTree.setChecked(data.id, isSelected)\r\n      if (data.children) {\r\n        for (let i = 0; i < data.children.length; i++) {\r\n          this.uniteChildSame(data.children[i], isSelected)\r\n        }\r\n      }\r\n    },\r\n    // 统一处理父节点为选中\r\n    selectedParent(data) {\r\n      let currentNode = this.$refs.menuTree.getNode(data)\r\n      if (currentNode.parent.key !== undefined) {\r\n        this.$refs.menuTree.setChecked(currentNode.parent, true)\r\n        this.selectedParent(currentNode.parent)\r\n      }\r\n    }\r\n  }\r\n}\r\n",null]}