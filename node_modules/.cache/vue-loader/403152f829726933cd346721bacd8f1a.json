{"remainingRequest":"D:\\品达通用权限系统\\资料\\前端工程\\pinda-authority-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\品达通用权限系统\\资料\\前端工程\\pinda-authority-ui\\src\\views\\febs\\system\\user\\Index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\品达通用权限系统\\资料\\前端工程\\pinda-authority-ui\\src\\views\\febs\\system\\user\\Index.vue","mtime":1585207882848},{"path":"D:\\品达通用权限系统\\资料\\前端工程\\pinda-authority-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\品达通用权限系统\\资料\\前端工程\\pinda-authority-ui\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\品达通用权限系统\\资料\\前端工程\\pinda-authority-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\品达通用权限系统\\资料\\前端工程\\pinda-authority-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport Pagination from '@/components/Pagination'\r\nimport UserEdit from './Edit'\r\nimport UserView from './View'\r\n\r\nexport default {\r\n  name: 'UserManage',\r\n  components: { Pagination, UserEdit, UserView },\r\n  filters: {\r\n    sexFilter(status) {\r\n      const map = {\r\n        0: 'success',\r\n        1: 'danger',\r\n        2: 'info'\r\n      }\r\n      return map[status]\r\n    },\r\n    statusFilter(status) {\r\n      const map = {\r\n        0: 'danger',\r\n        1: 'success'\r\n      }\r\n      return map[status]\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      dialog: {\r\n        isVisible: false,\r\n        title: ''\r\n      },\r\n      userViewVisible: false,\r\n      tableKey: 0,\r\n      loading: false,\r\n      list: null,\r\n      total: 0,\r\n      queryParams: {},\r\n      sort: {},\r\n      selection: [],\r\n      pagination: {\r\n        size: 10,\r\n        num: 1\r\n      }\r\n    }\r\n  },\r\n  computed: {\r\n    currentUser() {\r\n      return this.$store.state.account.user\r\n    }\r\n  },\r\n  mounted() {\r\n    this.fetch()\r\n  },\r\n  methods: {\r\n    transSex(sex) {\r\n      switch (sex) {\r\n        case '0':\r\n          return this.$t('common.sex.male')\r\n        case '1':\r\n          return this.$t('common.sex.female')\r\n        default:\r\n          return this.$t('common.sex.secret')\r\n      }\r\n    },\r\n    filterStatus(value, row) {\r\n      return row.status === value\r\n    },\r\n    filterSex(value, row) {\r\n      return row.sex === value\r\n    },\r\n    viewClose() {\r\n      this.userViewVisible = false\r\n    },\r\n    editClose() {\r\n      this.dialog.isVisible = false\r\n    },\r\n    editSuccess() {\r\n      this.search()\r\n    },\r\n    onSelectChange(selection) {\r\n      this.selection = selection\r\n    },\r\n    search() {\r\n      this.fetch({\r\n        ...this.queryParams,\r\n        ...this.sort\r\n      })\r\n    },\r\n    reset() {\r\n      this.queryParams = {}\r\n      this.sort = {}\r\n      this.$refs.table.clearSort()\r\n      this.$refs.table.clearFilter()\r\n      this.search()\r\n    },\r\n    exportExcel() {\r\n      this.$download('system/user/excel', {\r\n        pageSize: this.pagination.size,\r\n        pageNum: this.pagination.num,\r\n        ...this.queryParams\r\n      }, `user_${new Date().getTime()}.xlsx`)\r\n    },\r\n    add() {\r\n      this.dialog.title = this.$t('common.add')\r\n      this.dialog.isVisible = true\r\n    },\r\n    resetPassword() {\r\n      if (!this.selection.length) {\r\n        this.$message({\r\n          message: this.$t('tips.noDataSelected'),\r\n          type: 'warning'\r\n        })\r\n        return\r\n      }\r\n      this.$confirm(this.$t('tips.confirmRestPassword'), this.$t('common.tips'), {\r\n        confirmButtonText: this.$t('common.confirm'),\r\n        cancelButtonText: this.$t('common.cancel'),\r\n        type: 'warning'\r\n      }).then(() => {\r\n        const userNames = []\r\n        this.selection.forEach((u) => {\r\n          userNames.push(u.username)\r\n        })\r\n        this.$put('system/user/password/reset', {\r\n          usernames: userNames.join(',')\r\n        }).then(() => {\r\n          this.$message({\r\n            message: this.$t('tips.resetPasswordSuccess'),\r\n            type: 'success'\r\n          })\r\n          this.clearSelections()\r\n        })\r\n      }).catch(() => {\r\n        this.clearSelections()\r\n      })\r\n    },\r\n    singleDelete(row) {\r\n      this.$refs.table.toggleRowSelection(row, true)\r\n      this.batchDelete()\r\n    },\r\n    batchDelete() {\r\n      if (!this.selection.length) {\r\n        this.$message({\r\n          message: this.$t('tips.noDataSelected'),\r\n          type: 'warning'\r\n        })\r\n        return\r\n      }\r\n      let contain = false\r\n      this.$confirm(this.$t('tips.confirmDelete'), this.$t('common.tips'), {\r\n        confirmButtonText: this.$t('common.confirm'),\r\n        cancelButtonText: this.$t('common.cancel'),\r\n        type: 'warning'\r\n      }).then(() => {\r\n        const userIds = []\r\n        this.selection.forEach((u) => {\r\n          if (u.userId === this.currentUser.userId) {\r\n            contain = true\r\n            return\r\n          }\r\n          userIds.push(u.userId)\r\n        })\r\n        if (contain) {\r\n          this.$message({\r\n            message: this.$t('tips.containCurrentUser'),\r\n            type: 'warning'\r\n          })\r\n          this.clearSelections()\r\n        } else {\r\n          this.delete(userIds)\r\n        }\r\n      }).catch(() => {\r\n        this.clearSelections()\r\n      })\r\n    },\r\n    clearSelections() {\r\n      this.$refs.table.clearSelection()\r\n    },\r\n    delete(userIds) {\r\n      this.$delete(`system/user/${userIds}`).then(() => {\r\n        this.$message({\r\n          message: this.$t('tips.deleteSuccess'),\r\n          type: 'success'\r\n        })\r\n        this.search()\r\n      })\r\n    },\r\n    view(row) {\r\n      this.$refs.view.setUser(row)\r\n      this.userViewVisible = true\r\n    },\r\n    edit(row) {\r\n      let roleId = []\r\n      if (row.roleId && typeof row.roleId === 'string') {\r\n        roleId = row.roleId.split(',')\r\n        row.roleId = roleId\r\n      }\r\n      this.$refs.edit.setUser(row)\r\n      this.dialog.title = this.$t('common.edit')\r\n      this.dialog.isVisible = true\r\n    },\r\n    fetch(params = {}) {\r\n      params.pageSize = this.pagination.size\r\n      params.pageNum = this.pagination.num\r\n      if (this.queryParams.timeRange) {\r\n        params.createTimeFrom = this.queryParams.timeRange[0]\r\n        params.createTimeTo = this.queryParams.timeRange[1]\r\n      }\r\n      this.loading = true\r\n      this.$get('system/user', {\r\n        ...params\r\n      }).then((r) => {\r\n        const data = r.data.data\r\n        this.total = data.total\r\n        this.list = data.rows\r\n        this.loading = false\r\n      })\r\n    },\r\n    sortChange(val) {\r\n      this.sort.field = val.prop\r\n      this.sort.order = val.order\r\n      this.search()\r\n    }\r\n  }\r\n}\r\n",null]}