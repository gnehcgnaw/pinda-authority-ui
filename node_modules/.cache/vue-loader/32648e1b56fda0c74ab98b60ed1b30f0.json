{"remainingRequest":"D:\\projects\\beike\\pinda-authority-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\projects\\beike\\pinda-authority-ui\\src\\views\\profile\\components\\Account.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\projects\\beike\\pinda-authority-ui\\src\\views\\profile\\components\\Account.vue","mtime":1585207882930},{"path":"D:\\projects\\beike\\pinda-authority-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\projects\\beike\\pinda-authority-ui\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\projects\\beike\\pinda-authority-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\projects\\beike\\pinda-authority-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport { validMobile } from '@/utils/my-validate'\r\nimport userApi from '@/api/User.js'\r\n\r\nexport default {\r\n  components: {},\r\n  props: {\r\n    user: {\r\n      type: Object,\r\n      default: () => {\r\n        return {\r\n          name: '',\r\n          email: ''\r\n        }\r\n      }\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      rules: {\r\n        email: {\r\n          type: 'email',\r\n          message: this.$t('rules.email'),\r\n          trigger: 'blur'\r\n        },\r\n        mobile: {\r\n          validator: (rule, value, callback) => {\r\n            if (value !== '' && !validMobile(value)) {\r\n              callback(this.$t('rules.mobile'))\r\n            } else {\r\n              callback()\r\n            }\r\n          },\r\n          trigger: 'blur'\r\n        },\r\n        sex: {\r\n          required: true,\r\n          message: this.$t('rules.require'),\r\n          trigger: 'change'\r\n        },\r\n        workDescribe: { max: 255, message: '内容超过255字符', trigger: 'blur' }\r\n      }\r\n    }\r\n  },\r\n  computed: {\r\n    enums() {\r\n      return this.$store.state.common.enums\r\n    }\r\n  },\r\n  mounted() {},\r\n  methods: {\r\n    submit() {\r\n      this.$refs.form.validate(valid => {\r\n        if (valid) {\r\n          const temp = { ...this.user }\r\n          temp.account = temp.status = temp.avatar = temp.avatar = null\r\n          userApi.update({ ...temp }).then(response => {\r\n            const res = response.data\r\n            if (res.isSuccess) {\r\n              this.$message({\r\n                message: this.$t('tips.updateSuccess'),\r\n                type: 'success'\r\n              })\r\n            }\r\n            this.$store.commit('account/setUser', this.user)\r\n          })\r\n        } else {\r\n          return false\r\n        }\r\n      })\r\n    }\r\n  }\r\n}\r\n",null]}