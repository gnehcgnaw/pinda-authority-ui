{"remainingRequest":"D:\\品达通用权限系统\\资料\\前端工程\\pinda-authority-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\品达通用权限系统\\资料\\前端工程\\pinda-authority-ui\\src\\views\\febs\\system\\role\\Index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\品达通用权限系统\\资料\\前端工程\\pinda-authority-ui\\src\\views\\febs\\system\\role\\Index.vue","mtime":1585207882844},{"path":"D:\\品达通用权限系统\\资料\\前端工程\\pinda-authority-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\品达通用权限系统\\资料\\前端工程\\pinda-authority-ui\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\品达通用权限系统\\资料\\前端工程\\pinda-authority-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\品达通用权限系统\\资料\\前端工程\\pinda-authority-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport Pagination from '@/components/Pagination'\r\n\r\nexport default {\r\n  name: 'RoleManage',\r\n  components: { Pagination },\r\n  data() {\r\n    return {\r\n      tableKey: 0,\r\n      loading: false,\r\n      list: null,\r\n      selection: [],\r\n      total: 0,\r\n      permsTree: [],\r\n      queryParams: {},\r\n      sort: {},\r\n      pagination: {\r\n        size: 10,\r\n        num: 1\r\n      },\r\n      role: this.initRole(),\r\n      rules: {\r\n        roleName: [\r\n          { required: true, message: this.$t('rules.require'), trigger: 'blur' },\r\n          { min: 3, max: 10, message: this.$t('rules.range3to10'), trigger: 'blur' },\r\n          { validator: (rule, value, callback) => {\r\n            if (!this.role.roleId) {\r\n              this.$get(`system/role/check/${value}`).then((r) => {\r\n                if (!r.data) {\r\n                  callback(this.$t('rules.roleNameExist'))\r\n                } else {\r\n                  callback()\r\n                }\r\n              })\r\n            } else {\r\n              callback()\r\n            }\r\n          }, trigger: 'blur' }\r\n        ],\r\n        remark: { max: 50, message: this.$t('rules.noMoreThan50'), trigger: 'blur' }\r\n      }\r\n    }\r\n  },\r\n  mounted() {\r\n    this.fetch()\r\n    this.initMenuTree()\r\n  },\r\n  methods: {\r\n    initRole() {\r\n      return {\r\n        roleId: '',\r\n        roleName: '',\r\n        remark: ''\r\n      }\r\n    },\r\n    initMenuTree() {\r\n      this.$get('system/menu').then((r) => {\r\n        this.permsTree = r.data.data.rows\r\n      })\r\n    },\r\n    onSelectChange(selection) {\r\n      this.selection = selection\r\n    },\r\n    clearSelections() {\r\n      this.$refs.table.clearSelection()\r\n    },\r\n    exportExcel() {\r\n      this.$download('system/role/excel', {\r\n        pageSize: this.pagination.size,\r\n        pageNum: this.pagination.num,\r\n        ...this.queryParams\r\n      }, `role_${new Date().getTime()}.xlsx`)\r\n    },\r\n    edit(row) {\r\n      this.$refs.form.clearValidate()\r\n      this.role = { ...row }\r\n      if (this.role.menuIds) {\r\n        this.$refs.permsTree.setCheckedKeys(this.role.menuIds.split(','))\r\n      } else {\r\n        this.$refs.permsTree.setCheckedKeys([])\r\n      }\r\n    },\r\n    singleDelete(row) {\r\n      this.$refs.table.toggleRowSelection(row, true)\r\n      this.batchDelete()\r\n    },\r\n    batchDelete() {\r\n      if (!this.selection.length) {\r\n        this.$message({\r\n          message: this.$t('tips.noDataSelected'),\r\n          type: 'warning'\r\n        })\r\n        return\r\n      }\r\n      this.$confirm(this.$t('tips.confirmDelete'), this.$t('common.tips'), {\r\n        confirmButtonText: this.$t('common.confirm'),\r\n        cancelButtonText: this.$t('common.cancel'),\r\n        type: 'warning'\r\n      }).then(() => {\r\n        const roleIds = []\r\n        this.selection.forEach((r) => {\r\n          roleIds.push(r.roleId)\r\n        })\r\n        this.delete(roleIds)\r\n      }).catch(() => {\r\n        this.clearSelections()\r\n      })\r\n    },\r\n    delete(roleIds) {\r\n      this.$delete(`system/role/${roleIds}`).then(() => {\r\n        this.$message({\r\n          message: this.$t('tips.deleteSuccess'),\r\n          type: 'success'\r\n        })\r\n        this.search()\r\n      })\r\n    },\r\n    submit() {\r\n      this.$refs.form.validate((valid) => {\r\n        if (valid) {\r\n          if (this.role.roleId) {\r\n            this.role.menuIds = this.$refs.permsTree.getCheckedKeys().join(',')\r\n            this.role.createTime = this.role.modifyTime = null\r\n            this.$put('system/role', { ...this.role }).then(() => {\r\n              this.$message({\r\n                message: this.$t('tips.updateSuccess'),\r\n                type: 'success'\r\n              })\r\n              this.reset()\r\n            })\r\n          } else {\r\n            this.role.menuIds = this.$refs.permsTree.getCheckedKeys().join(',')\r\n            this.$post('system/role', { ...this.role }).then(() => {\r\n              this.$message({\r\n                message: this.$t('tips.createSuccess'),\r\n                type: 'success'\r\n              })\r\n              this.reset()\r\n            })\r\n          }\r\n        } else {\r\n          return false\r\n        }\r\n      })\r\n    },\r\n    add() {\r\n      this.resetForm()\r\n    },\r\n    sortChange(val) {\r\n      this.sort.field = val.prop\r\n      this.sort.order = val.order\r\n      this.search()\r\n    },\r\n    reset() {\r\n      this.resetForm()\r\n      this.queryParams = {}\r\n      this.sort = {}\r\n      this.$refs.table.clearSort()\r\n      this.search()\r\n    },\r\n    resetForm() {\r\n      this.$refs.form.clearValidate()\r\n      this.$refs.form.resetFields()\r\n      this.role = this.initRole()\r\n      this.$refs.permsTree.setCheckedKeys([])\r\n    },\r\n    search() {\r\n      this.resetForm()\r\n      this.fetch({\r\n        ...this.queryParams,\r\n        ...this.sort\r\n      })\r\n    },\r\n    fetch(params = {}) {\r\n      this.loading = true\r\n      params.pageSize = this.pagination.size\r\n      params.pageNum = this.pagination.num\r\n      this.$get('system/role', { ...params }).then((r) => {\r\n        const data = r.data.data\r\n        this.list = data.rows\r\n        this.total = data.total\r\n        this.loading = false\r\n      })\r\n    }\r\n  }\r\n}\r\n",null]}