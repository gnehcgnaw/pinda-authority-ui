{"remainingRequest":"D:\\projects\\beike\\pinda-authority-ui\\node_modules\\babel-loader\\lib\\index.js!D:\\projects\\beike\\pinda-authority-ui\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\projects\\beike\\pinda-authority-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\projects\\beike\\pinda-authority-ui\\src\\views\\febs\\system\\client\\Edit.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\projects\\beike\\pinda-authority-ui\\src\\views\\febs\\system\\client\\Edit.vue","mtime":1585207882836},{"path":"D:\\projects\\beike\\pinda-authority-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\projects\\beike\\pinda-authority-ui\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\projects\\beike\\pinda-authority-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\projects\\beike\\pinda-authority-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"D:\\\\projects\\\\beike\\\\pinda-authority-ui\\\\node_modules\\\\@babel\\\\runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nrequire(\"core-js/modules/es6.regexp.split\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"D:\\\\projects\\\\beike\\\\pinda-authority-ui\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/objectSpread2\"));\n\nrequire(\"core-js/modules/es6.regexp.to-string\");\n\nvar _myValidate = require(\"@/utils/my-validate\");\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar _default = {\n  name: 'ClientEdit',\n  props: {\n    dialogVisible: {\n      type: Boolean,\n      default: false\n    },\n    title: {\n      type: String,\n      default: ''\n    },\n    type: {\n      type: String,\n      default: ''\n    }\n  },\n  data: function data() {\n    var _this = this;\n\n    return {\n      screenWidth: 0,\n      width: this.initWidth(),\n      client: this.initClient(),\n      rules: {\n        clientId: [{\n          required: true,\n          message: this.$t('rules.require'),\n          trigger: 'blur'\n        }, {\n          min: 3,\n          max: 20,\n          message: this.$t('rules.range3to20'),\n          trigger: 'blur'\n        }, {\n          validator: function validator(rule, value, callback) {\n            if (_this.type === 'add') {\n              _this.$get(\"auth/client/check/\".concat(value)).then(function (r) {\n                if (!r.data) {\n                  callback(_this.$t('rules.clientIdExist'));\n                } else {\n                  callback();\n                }\n              });\n            } else {\n              callback();\n            }\n          },\n          trigger: 'blur'\n        }],\n        scope: [{\n          max: 100,\n          message: this.$t('rules.noMoreThan100'),\n          trigger: 'blur'\n        }, {\n          required: true,\n          message: this.$t('rules.require'),\n          trigger: 'blur'\n        }],\n        webServerRedirectUri: {\n          validator: function validator(rule, value, callback) {\n            if (value !== '' && value != null && !(0, _myValidate.validURL)(value)) {\n              callback(new Error(_this.$t('rules.invalidURL')));\n            } else {\n              callback();\n            }\n          },\n          trigger: 'blur'\n        },\n        clientSecret: [{\n          required: true,\n          message: this.$t('rules.require'),\n          trigger: 'blur'\n        }, {\n          min: 6,\n          max: 20,\n          message: this.$t('rules.range6to20'),\n          trigger: 'blur'\n        }],\n        accessTokenValidity: [{\n          required: true,\n          message: this.$t('rules.require'),\n          trigger: 'blur'\n        }, {\n          validator: function validator(rule, value, callback) {\n            if (!(0, _myValidate.isIntegerGreaterThanZero)(value)) {\n              callback(new Error(_this.$t('rules.invalidInteger')));\n            } else if (value.toString().length > 11) {\n              callback(new Error(_this.$t('rules.noMoreThan11')));\n            } else {\n              callback();\n            }\n          },\n          trigger: 'blur'\n        }],\n        refreshTokenValidity: [{\n          validator: function validator(rule, value, callback) {\n            if (value === null || value === '') {\n              callback();\n            } else if (!(0, _myValidate.isIntegerGreaterThanZero)(value)) {\n              callback(new Error(_this.$t('rules.invalidInteger')));\n            } else if (value.toString().length > 11) {\n              callback(new Error(_this.$t('rules.noMoreThan11')));\n            } else {\n              callback();\n            }\n          },\n          trigger: 'blur'\n        }],\n        authorizedGrantTypes: {\n          required: true,\n          message: this.$t('rules.require'),\n          trigger: 'blur'\n        }\n      },\n      grantTypes: [{\n        type: 'refresh_token'\n      }, {\n        type: 'authorization_code'\n      }, {\n        type: 'client_credentials'\n      }, {\n        type: 'password'\n      }, {\n        type: 'implicit'\n      }]\n    };\n  },\n  computed: {\n    isVisible: {\n      get: function get() {\n        return this.dialogVisible;\n      },\n      set: function set() {\n        this.close();\n        this.reset();\n      }\n    }\n  },\n  mounted: function mounted() {\n    var _this2 = this;\n\n    window.onresize = function () {\n      return function () {\n        _this2.width = _this2.initWidth();\n      }();\n    };\n  },\n  methods: {\n    initWidth: function initWidth() {\n      this.screenWidth = document.body.clientWidth;\n\n      if (this.screenWidth < 991) {\n        return '90%';\n      } else if (this.screenWidth < 1400) {\n        return '45%';\n      } else {\n        return '800px';\n      }\n    },\n    initClient: function initClient() {\n      return {\n        clientId: '',\n        resourceIds: '',\n        clientSecret: '',\n        scope: '',\n        authorizedGrantTypes: '',\n        webServerRedirectUri: '',\n        accessTokenValidity: null,\n        refreshTokenValidity: null,\n        autoapprove: ''\n      };\n    },\n    setClient: function setClient(val) {\n      this.client = (0, _objectSpread2.default)({}, val);\n      var authorizedGrantTypes = [];\n\n      if (this.client.authorizedGrantTypes && typeof this.client.authorizedGrantTypes === 'string') {\n        authorizedGrantTypes = this.client.authorizedGrantTypes.split(',');\n        this.client.authorizedGrantTypes = authorizedGrantTypes;\n      }\n\n      this.client.clientSecret = '******';\n      this.client.autoapprove = this.client.autoapprove !== null ? this.client.autoapprove + '' : '';\n    },\n    submitForm: function submitForm() {\n      var _this3 = this;\n\n      this.$refs.form.validate(function (valid) {\n        if (valid) {\n          if (_this3.type === 'add') {\n            // create\n            _this3.client.authorizedGrantTypes = _this3.client.authorizedGrantTypes.join(',');\n\n            _this3.$post('auth/client', (0, _objectSpread2.default)({}, _this3.client)).then(function () {\n              _this3.isVisible = false;\n\n              _this3.$message({\n                message: _this3.$t('tips.createSuccess'),\n                type: 'success'\n              });\n\n              _this3.$emit('success');\n            });\n          } else {\n            // update\n            _this3.client.authorizedGrantTypes = _this3.client.authorizedGrantTypes.join(',');\n\n            _this3.$put('auth/client', (0, _objectSpread2.default)({}, _this3.client)).then(function () {\n              _this3.isVisible = false;\n\n              _this3.$message({\n                message: _this3.$t('tips.updateSuccess'),\n                type: 'success'\n              });\n\n              _this3.$emit('success');\n            });\n          }\n        } else {\n          return false;\n        }\n      });\n    },\n    close: function close() {\n      this.$emit('close');\n    },\n    reset: function reset() {\n      this.$refs.form.clearValidate();\n      this.$refs.form.resetFields();\n      this.client = this.initClient();\n    }\n  }\n};\nexports.default = _default;",null]}