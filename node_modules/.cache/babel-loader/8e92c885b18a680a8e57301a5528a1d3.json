{"remainingRequest":"D:\\品达通用权限系统\\资料\\前端工程\\pinda-authority-ui\\node_modules\\babel-loader\\lib\\index.js!D:\\品达通用权限系统\\资料\\前端工程\\pinda-authority-ui\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\品达通用权限系统\\资料\\前端工程\\pinda-authority-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\品达通用权限系统\\资料\\前端工程\\pinda-authority-ui\\src\\views\\pinda\\auth\\role\\RoleAuthority.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\品达通用权限系统\\资料\\前端工程\\pinda-authority-ui\\src\\views\\pinda\\auth\\role\\RoleAuthority.vue","mtime":1585207882872},{"path":"D:\\品达通用权限系统\\资料\\前端工程\\pinda-authority-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\品达通用权限系统\\资料\\前端工程\\pinda-authority-ui\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\品达通用权限系统\\资料\\前端工程\\pinda-authority-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\品达通用权限系统\\资料\\前端工程\\pinda-authority-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"D:\\\\\\u54C1\\u8FBE\\u901A\\u7528\\u6743\\u9650\\u7CFB\\u7EDF\\\\\\u8D44\\u6599\\\\\\u524D\\u7AEF\\u5DE5\\u7A0B\\\\pinda-authority-ui\\\\node_modules\\\\@babel\\\\runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"D:\\\\\\u54C1\\u8FBE\\u901A\\u7528\\u6743\\u9650\\u7CFB\\u7EDF\\\\\\u8D44\\u6599\\\\\\u524D\\u7AEF\\u5DE5\\u7A0B\\\\pinda-authority-ui\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/toConsumableArray\"));\n\nrequire(\"core-js/modules/es6.set\");\n\nrequire(\"core-js/modules/es6.string.iterator\");\n\nrequire(\"core-js/modules/es6.array.from\");\n\nrequire(\"core-js/modules/es6.array.sort\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nvar _Role = _interopRequireDefault(require(\"@/api/Role.js\"));\n\nvar _Menu = _interopRequireDefault(require(\"@/api/Menu.js\"));\n\nvar _Resource = _interopRequireDefault(require(\"@/api/Resource.js\"));\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar _default = {\n  name: 'RoleAuthorityEdit',\n  components: {},\n  props: {\n    dialogVisible: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data: function data() {\n    return {\n      roleAuthority: this.initRoleAuthority(),\n      screenWidth: 0,\n      width: this.initWidth(),\n      menuTree: [],\n      resourceList: [],\n      rules: {},\n      tableKey: 0,\n      loading: false,\n      tableData: {\n        total: 0\n      },\n      selection: [],\n      disabled: false,\n      isIndeterminate: false,\n      checkedMenu: false\n    };\n  },\n  computed: {\n    isVisible: {\n      get: function get() {\n        return this.dialogVisible;\n      },\n      set: function set() {\n        this.close();\n        this.reset();\n      }\n    },\n    title: function title() {\n      return '配置菜单资源';\n    }\n  },\n  watch: {},\n  mounted: function mounted() {\n    var _this = this;\n\n    this.initMenuTree();\n\n    window.onresize = function () {\n      return function () {\n        _this.width = _this.initWidth();\n      }();\n    };\n  },\n  methods: {\n    allMenuIdList: function allMenuIdList() {\n      var menuIdList = [];\n      this.getMenuIdList(this.menuTree, menuIdList);\n      return menuIdList;\n    },\n    getMenuIdList: function getMenuIdList(menuList, menuIdList) {\n      var _this2 = this;\n\n      if (menuList) {\n        menuList.forEach(function (item) {\n          menuIdList.push(item.id);\n\n          if (item.children && item.children.length > 0) {\n            _this2.getMenuIdList(item.children, menuIdList);\n          }\n        });\n      }\n    },\n    checkedAll: function checkedAll() {\n      if (this.checkedMenu) {\n        //全选\n        this.$refs.menuTree.setCheckedKeys(this.allMenuIdList());\n        this.isIndeterminate = false;\n      } else {\n        //取消选中\n        this.$refs.menuTree.setCheckedKeys([]);\n        this.isIndeterminate = false;\n      }\n    },\n    nodeClick: function nodeClick(data) {\n      var vm = this;\n      vm.loading = true;\n      this.$refs.table.clearSelection();\n\n      _Resource.default.page({\n        current: 1,\n        size: 10000,\n        menuId: data.id\n      }).then(function (response) {\n        var res = response.data;\n        vm.tableData = res.data;\n        vm.loading = false;\n        vm.displayTable();\n      });\n    },\n    displayTable: function displayTable() {\n      var vm = this;\n      vm.tableData.records.forEach(function (item) {\n        vm.roleAuthority.resourceIdList.forEach(function (resourceId) {\n          if (item.id === resourceId) {\n            vm.$refs.table.toggleRowSelection(item, true);\n          }\n        });\n      });\n    },\n    onAllSelect: function onAllSelect(selection) {\n      this.onSelect(selection);\n    },\n    onSelect: function onSelect(selection) {\n      var _this3 = this;\n\n      console.info(selection);\n      var currentSelect = selection.map(function (item) {\n        return item.id;\n      });\n      var currentAllData = this.tableData.records.map(function (item) {\n        return item.id;\n      });\n      var removeDatas = [];\n\n      if (currentAllData.length != currentSelect.length) {\n        currentSelect.sort();\n        currentAllData.sort();\n\n        for (var i = 0; i < currentAllData.length; i++) {\n          if (currentAllData[i] != currentSelect[i - removeDatas.length]) {\n            removeDatas.push(currentAllData[i]);\n          }\n        }\n      }\n\n      if (removeDatas.length > 0) {\n        removeDatas.forEach(function (val) {\n          var index = _this3.roleAuthority.resourceIdList.indexOf(val);\n\n          _this3.roleAuthority.resourceIdList.splice(index, 1);\n        });\n      }\n\n      this.roleAuthority.resourceIdList = Array.from(new Set([].concat((0, _toConsumableArray2.default)(this.roleAuthority.resourceIdList), (0, _toConsumableArray2.default)(currentSelect)))); //this.roleAuthority.resourceIdList = selection.map(item => item.id)\n\n      this.selection = selection;\n      var old = this.$refs.menuTree.getCheckedKeys();\n      var must = selection.map(function (item) {\n        return item.menuId;\n      });\n      var newSelected = Array.from(new Set([].concat((0, _toConsumableArray2.default)(old), (0, _toConsumableArray2.default)(must))));\n      this.$refs.menuTree.setCheckedKeys(newSelected);\n      newSelected.forEach(function (item) {\n        _this3.selectedParent(item);\n      });\n    },\n    initMenuTree: function initMenuTree() {\n      var _this4 = this;\n\n      _Menu.default.allTree().then(function (response) {\n        var res = response.data;\n        _this4.menuTree = res.data;\n      });\n    },\n    initRoleAuthority: function initRoleAuthority() {\n      return {\n        roleId: '',\n        menuIdList: [],\n        resourceIdList: []\n      };\n    },\n    initWidth: function initWidth() {\n      this.screenWidth = document.body.clientWidth;\n\n      if (this.screenWidth < 991) {\n        return '90%';\n      } else if (this.screenWidth < 1400) {\n        return '45%';\n      } else {\n        return '1000px';\n      }\n    },\n    setRoleAuthority: function setRoleAuthority(val) {\n      var vm = this;\n      vm.roleAuthority.roleId = val.id; // vm.disabled = val.readonly\n\n      _Role.default.findAuthorityIdByRoleId(val.id).then(function (response) {\n        var res = response.data;\n        vm.roleAuthority.menuIdList = res.data.menuIdList;\n        vm.roleAuthority.resourceIdList = res.data.resourceIdList;\n        vm.$refs.menuTree.setCheckedKeys(res.data.menuIdList);\n        res.data.menuIdList.forEach(function (item) {\n          vm.selectedParent(item);\n        });\n      });\n    },\n    close: function close() {\n      this.$emit('close');\n    },\n    reset: function reset() {\n      // 先清除校验，再清除表单，不然有奇怪的bug\n      this.$refs.form.clearValidate();\n      this.$refs.form.resetFields();\n      this.roleAuthority = this.initRoleAuthority();\n      this.$refs.menuTree.setCheckedKeys([]);\n      this.$refs.table.clearSelection();\n    },\n    submitForm: function submitForm() {\n      var vm = this;\n      this.$refs.form.validate(function (valid) {\n        if (valid) {\n          vm.editSubmit();\n        } else {\n          return false;\n        }\n      });\n    },\n    editSubmit: function editSubmit() {\n      var vm = this;\n      this.roleAuthority.menuIdList = vm.$refs.menuTree.getHalfCheckedKeys().concat(vm.$refs.menuTree.getCheckedKeys()); //this.roleAuthority.resourceIdList = vm.selection.map(item => item.id)\n\n      _Role.default.saveRoleAuthority(this.roleAuthority).then(function (response) {\n        var res = response.data;\n\n        if (res.isSuccess) {\n          vm.isVisible = false;\n          vm.$message({\n            message: vm.$t('tips.createSuccess'),\n            type: 'success'\n          });\n          vm.$emit('success');\n        }\n      });\n    },\n    checkMenu: function checkMenu(data, node) {\n      if (node.checkedKeys.length === 0) {\n        //取消\n        this.checkedMenu = false;\n        this.isIndeterminate = false;\n      } else if (node.checkedKeys.length === this.allMenuIdList().length) {\n        //全选\n        this.checkedMenu = true;\n        this.isIndeterminate = false;\n      } else {\n        // 中立\n        this.checkedMenu = false;\n        this.isIndeterminate = true;\n      } // 用于：父子节点严格互不关联时，父节点勾选变化时通知子节点同步变化，实现单向关联。\n\n\n      var selected = node.checkedKeys.indexOf(data.id); // -1未选中\n      // 选中\n\n      if (selected !== -1) {\n        // 子节点只要被选中父节点就被选中\n        this.selectedParent(data); // 统一处理子节点为相同的勾选状态\n\n        this.uniteChildSame(data, true);\n      } else {\n        // 未选中 处理子节点全部未选中\n        if (data.children && data.children.length !== 0) {\n          this.uniteChildSame(data, false);\n        }\n      }\n    },\n    // 统一处理子节点为相同的勾选状态\n    uniteChildSame: function uniteChildSame(data, isSelected) {\n      this.$refs.menuTree.setChecked(data.id, isSelected);\n\n      if (data.children) {\n        for (var i = 0; i < data.children.length; i++) {\n          this.uniteChildSame(data.children[i], isSelected);\n        }\n      }\n    },\n    // 统一处理父节点为选中\n    selectedParent: function selectedParent(data) {\n      var currentNode = this.$refs.menuTree.getNode(data);\n\n      if (currentNode.parent.key !== undefined) {\n        this.$refs.menuTree.setChecked(currentNode.parent, true);\n        this.selectedParent(currentNode.parent);\n      }\n    }\n  }\n};\nexports.default = _default;",null]}