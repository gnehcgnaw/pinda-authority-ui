{"remainingRequest":"D:\\品达通用权限系统\\资料\\前端工程\\pinda-authority-ui\\node_modules\\babel-loader\\lib\\index.js!D:\\品达通用权限系统\\资料\\前端工程\\pinda-authority-ui\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\品达通用权限系统\\资料\\前端工程\\pinda-authority-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\品达通用权限系统\\资料\\前端工程\\pinda-authority-ui\\src\\views\\febs\\system\\user\\Index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\品达通用权限系统\\资料\\前端工程\\pinda-authority-ui\\src\\views\\febs\\system\\user\\Index.vue","mtime":1585207882848},{"path":"D:\\品达通用权限系统\\资料\\前端工程\\pinda-authority-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\品达通用权限系统\\资料\\前端工程\\pinda-authority-ui\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\品达通用权限系统\\资料\\前端工程\\pinda-authority-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\品达通用权限系统\\资料\\前端工程\\pinda-authority-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"D:\\\\\\u54C1\\u8FBE\\u901A\\u7528\\u6743\\u9650\\u7CFB\\u7EDF\\\\\\u8D44\\u6599\\\\\\u524D\\u7AEF\\u5DE5\\u7A0B\\\\pinda-authority-ui\\\\node_modules\\\\@babel\\\\runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nrequire(\"core-js/modules/es6.regexp.split\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nrequire(\"core-js/modules/es6.array.sort\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"D:\\\\\\u54C1\\u8FBE\\u901A\\u7528\\u6743\\u9650\\u7CFB\\u7EDF\\\\\\u8D44\\u6599\\\\\\u524D\\u7AEF\\u5DE5\\u7A0B\\\\pinda-authority-ui\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/objectSpread2\"));\n\nrequire(\"core-js/modules/es6.regexp.search\");\n\nvar _Pagination = _interopRequireDefault(require(\"@/components/Pagination\"));\n\nvar _Edit = _interopRequireDefault(require(\"./Edit\"));\n\nvar _View = _interopRequireDefault(require(\"./View\"));\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar _default = {\n  name: 'UserManage',\n  components: {\n    Pagination: _Pagination.default,\n    UserEdit: _Edit.default,\n    UserView: _View.default\n  },\n  filters: {\n    sexFilter: function sexFilter(status) {\n      var map = {\n        0: 'success',\n        1: 'danger',\n        2: 'info'\n      };\n      return map[status];\n    },\n    statusFilter: function statusFilter(status) {\n      var map = {\n        0: 'danger',\n        1: 'success'\n      };\n      return map[status];\n    }\n  },\n  data: function data() {\n    return {\n      dialog: {\n        isVisible: false,\n        title: ''\n      },\n      userViewVisible: false,\n      tableKey: 0,\n      loading: false,\n      list: null,\n      total: 0,\n      queryParams: {},\n      sort: {},\n      selection: [],\n      pagination: {\n        size: 10,\n        num: 1\n      }\n    };\n  },\n  computed: {\n    currentUser: function currentUser() {\n      return this.$store.state.account.user;\n    }\n  },\n  mounted: function mounted() {\n    this.fetch();\n  },\n  methods: {\n    transSex: function transSex(sex) {\n      switch (sex) {\n        case '0':\n          return this.$t('common.sex.male');\n\n        case '1':\n          return this.$t('common.sex.female');\n\n        default:\n          return this.$t('common.sex.secret');\n      }\n    },\n    filterStatus: function filterStatus(value, row) {\n      return row.status === value;\n    },\n    filterSex: function filterSex(value, row) {\n      return row.sex === value;\n    },\n    viewClose: function viewClose() {\n      this.userViewVisible = false;\n    },\n    editClose: function editClose() {\n      this.dialog.isVisible = false;\n    },\n    editSuccess: function editSuccess() {\n      this.search();\n    },\n    onSelectChange: function onSelectChange(selection) {\n      this.selection = selection;\n    },\n    search: function search() {\n      this.fetch((0, _objectSpread2.default)({}, this.queryParams, {}, this.sort));\n    },\n    reset: function reset() {\n      this.queryParams = {};\n      this.sort = {};\n      this.$refs.table.clearSort();\n      this.$refs.table.clearFilter();\n      this.search();\n    },\n    exportExcel: function exportExcel() {\n      this.$download('system/user/excel', (0, _objectSpread2.default)({\n        pageSize: this.pagination.size,\n        pageNum: this.pagination.num\n      }, this.queryParams), \"user_\".concat(new Date().getTime(), \".xlsx\"));\n    },\n    add: function add() {\n      this.dialog.title = this.$t('common.add');\n      this.dialog.isVisible = true;\n    },\n    resetPassword: function resetPassword() {\n      var _this = this;\n\n      if (!this.selection.length) {\n        this.$message({\n          message: this.$t('tips.noDataSelected'),\n          type: 'warning'\n        });\n        return;\n      }\n\n      this.$confirm(this.$t('tips.confirmRestPassword'), this.$t('common.tips'), {\n        confirmButtonText: this.$t('common.confirm'),\n        cancelButtonText: this.$t('common.cancel'),\n        type: 'warning'\n      }).then(function () {\n        var userNames = [];\n\n        _this.selection.forEach(function (u) {\n          userNames.push(u.username);\n        });\n\n        _this.$put('system/user/password/reset', {\n          usernames: userNames.join(',')\n        }).then(function () {\n          _this.$message({\n            message: _this.$t('tips.resetPasswordSuccess'),\n            type: 'success'\n          });\n\n          _this.clearSelections();\n        });\n      }).catch(function () {\n        _this.clearSelections();\n      });\n    },\n    singleDelete: function singleDelete(row) {\n      this.$refs.table.toggleRowSelection(row, true);\n      this.batchDelete();\n    },\n    batchDelete: function batchDelete() {\n      var _this2 = this;\n\n      if (!this.selection.length) {\n        this.$message({\n          message: this.$t('tips.noDataSelected'),\n          type: 'warning'\n        });\n        return;\n      }\n\n      var contain = false;\n      this.$confirm(this.$t('tips.confirmDelete'), this.$t('common.tips'), {\n        confirmButtonText: this.$t('common.confirm'),\n        cancelButtonText: this.$t('common.cancel'),\n        type: 'warning'\n      }).then(function () {\n        var userIds = [];\n\n        _this2.selection.forEach(function (u) {\n          if (u.userId === _this2.currentUser.userId) {\n            contain = true;\n            return;\n          }\n\n          userIds.push(u.userId);\n        });\n\n        if (contain) {\n          _this2.$message({\n            message: _this2.$t('tips.containCurrentUser'),\n            type: 'warning'\n          });\n\n          _this2.clearSelections();\n        } else {\n          _this2.delete(userIds);\n        }\n      }).catch(function () {\n        _this2.clearSelections();\n      });\n    },\n    clearSelections: function clearSelections() {\n      this.$refs.table.clearSelection();\n    },\n    delete: function _delete(userIds) {\n      var _this3 = this;\n\n      this.$delete(\"system/user/\".concat(userIds)).then(function () {\n        _this3.$message({\n          message: _this3.$t('tips.deleteSuccess'),\n          type: 'success'\n        });\n\n        _this3.search();\n      });\n    },\n    view: function view(row) {\n      this.$refs.view.setUser(row);\n      this.userViewVisible = true;\n    },\n    edit: function edit(row) {\n      var roleId = [];\n\n      if (row.roleId && typeof row.roleId === 'string') {\n        roleId = row.roleId.split(',');\n        row.roleId = roleId;\n      }\n\n      this.$refs.edit.setUser(row);\n      this.dialog.title = this.$t('common.edit');\n      this.dialog.isVisible = true;\n    },\n    fetch: function fetch() {\n      var _this4 = this;\n\n      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      params.pageSize = this.pagination.size;\n      params.pageNum = this.pagination.num;\n\n      if (this.queryParams.timeRange) {\n        params.createTimeFrom = this.queryParams.timeRange[0];\n        params.createTimeTo = this.queryParams.timeRange[1];\n      }\n\n      this.loading = true;\n      this.$get('system/user', (0, _objectSpread2.default)({}, params)).then(function (r) {\n        var data = r.data.data;\n        _this4.total = data.total;\n        _this4.list = data.rows;\n        _this4.loading = false;\n      });\n    },\n    sortChange: function sortChange(val) {\n      this.sort.field = val.prop;\n      this.sort.order = val.order;\n      this.search();\n    }\n  }\n};\nexports.default = _default;",null]}