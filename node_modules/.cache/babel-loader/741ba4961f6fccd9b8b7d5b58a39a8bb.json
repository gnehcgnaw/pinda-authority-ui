{"remainingRequest":"D:\\品达通用权限系统\\资料\\前端工程\\pinda-authority-ui\\node_modules\\babel-loader\\lib\\index.js!D:\\品达通用权限系统\\资料\\前端工程\\pinda-authority-ui\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\品达通用权限系统\\资料\\前端工程\\pinda-authority-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\品达通用权限系统\\资料\\前端工程\\pinda-authority-ui\\src\\views\\febs\\system\\role\\Index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\品达通用权限系统\\资料\\前端工程\\pinda-authority-ui\\src\\views\\febs\\system\\role\\Index.vue","mtime":1585207882844},{"path":"D:\\品达通用权限系统\\资料\\前端工程\\pinda-authority-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\品达通用权限系统\\资料\\前端工程\\pinda-authority-ui\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\品达通用权限系统\\资料\\前端工程\\pinda-authority-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\品达通用权限系统\\资料\\前端工程\\pinda-authority-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"D:\\\\\\u54C1\\u8FBE\\u901A\\u7528\\u6743\\u9650\\u7CFB\\u7EDF\\\\\\u8D44\\u6599\\\\\\u524D\\u7AEF\\u5DE5\\u7A0B\\\\pinda-authority-ui\\\\node_modules\\\\@babel\\\\runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nrequire(\"core-js/modules/es6.array.sort\");\n\nrequire(\"core-js/modules/es6.regexp.search\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nrequire(\"core-js/modules/es6.regexp.split\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"D:\\\\\\u54C1\\u8FBE\\u901A\\u7528\\u6743\\u9650\\u7CFB\\u7EDF\\\\\\u8D44\\u6599\\\\\\u524D\\u7AEF\\u5DE5\\u7A0B\\\\pinda-authority-ui\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/objectSpread2\"));\n\nvar _Pagination = _interopRequireDefault(require(\"@/components/Pagination\"));\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar _default = {\n  name: 'RoleManage',\n  components: {\n    Pagination: _Pagination.default\n  },\n  data: function data() {\n    var _this = this;\n\n    return {\n      tableKey: 0,\n      loading: false,\n      list: null,\n      selection: [],\n      total: 0,\n      permsTree: [],\n      queryParams: {},\n      sort: {},\n      pagination: {\n        size: 10,\n        num: 1\n      },\n      role: this.initRole(),\n      rules: {\n        roleName: [{\n          required: true,\n          message: this.$t('rules.require'),\n          trigger: 'blur'\n        }, {\n          min: 3,\n          max: 10,\n          message: this.$t('rules.range3to10'),\n          trigger: 'blur'\n        }, {\n          validator: function validator(rule, value, callback) {\n            if (!_this.role.roleId) {\n              _this.$get(\"system/role/check/\".concat(value)).then(function (r) {\n                if (!r.data) {\n                  callback(_this.$t('rules.roleNameExist'));\n                } else {\n                  callback();\n                }\n              });\n            } else {\n              callback();\n            }\n          },\n          trigger: 'blur'\n        }],\n        remark: {\n          max: 50,\n          message: this.$t('rules.noMoreThan50'),\n          trigger: 'blur'\n        }\n      }\n    };\n  },\n  mounted: function mounted() {\n    this.fetch();\n    this.initMenuTree();\n  },\n  methods: {\n    initRole: function initRole() {\n      return {\n        roleId: '',\n        roleName: '',\n        remark: ''\n      };\n    },\n    initMenuTree: function initMenuTree() {\n      var _this2 = this;\n\n      this.$get('system/menu').then(function (r) {\n        _this2.permsTree = r.data.data.rows;\n      });\n    },\n    onSelectChange: function onSelectChange(selection) {\n      this.selection = selection;\n    },\n    clearSelections: function clearSelections() {\n      this.$refs.table.clearSelection();\n    },\n    exportExcel: function exportExcel() {\n      this.$download('system/role/excel', (0, _objectSpread2.default)({\n        pageSize: this.pagination.size,\n        pageNum: this.pagination.num\n      }, this.queryParams), \"role_\".concat(new Date().getTime(), \".xlsx\"));\n    },\n    edit: function edit(row) {\n      this.$refs.form.clearValidate();\n      this.role = (0, _objectSpread2.default)({}, row);\n\n      if (this.role.menuIds) {\n        this.$refs.permsTree.setCheckedKeys(this.role.menuIds.split(','));\n      } else {\n        this.$refs.permsTree.setCheckedKeys([]);\n      }\n    },\n    singleDelete: function singleDelete(row) {\n      this.$refs.table.toggleRowSelection(row, true);\n      this.batchDelete();\n    },\n    batchDelete: function batchDelete() {\n      var _this3 = this;\n\n      if (!this.selection.length) {\n        this.$message({\n          message: this.$t('tips.noDataSelected'),\n          type: 'warning'\n        });\n        return;\n      }\n\n      this.$confirm(this.$t('tips.confirmDelete'), this.$t('common.tips'), {\n        confirmButtonText: this.$t('common.confirm'),\n        cancelButtonText: this.$t('common.cancel'),\n        type: 'warning'\n      }).then(function () {\n        var roleIds = [];\n\n        _this3.selection.forEach(function (r) {\n          roleIds.push(r.roleId);\n        });\n\n        _this3.delete(roleIds);\n      }).catch(function () {\n        _this3.clearSelections();\n      });\n    },\n    delete: function _delete(roleIds) {\n      var _this4 = this;\n\n      this.$delete(\"system/role/\".concat(roleIds)).then(function () {\n        _this4.$message({\n          message: _this4.$t('tips.deleteSuccess'),\n          type: 'success'\n        });\n\n        _this4.search();\n      });\n    },\n    submit: function submit() {\n      var _this5 = this;\n\n      this.$refs.form.validate(function (valid) {\n        if (valid) {\n          if (_this5.role.roleId) {\n            _this5.role.menuIds = _this5.$refs.permsTree.getCheckedKeys().join(',');\n            _this5.role.createTime = _this5.role.modifyTime = null;\n\n            _this5.$put('system/role', (0, _objectSpread2.default)({}, _this5.role)).then(function () {\n              _this5.$message({\n                message: _this5.$t('tips.updateSuccess'),\n                type: 'success'\n              });\n\n              _this5.reset();\n            });\n          } else {\n            _this5.role.menuIds = _this5.$refs.permsTree.getCheckedKeys().join(',');\n\n            _this5.$post('system/role', (0, _objectSpread2.default)({}, _this5.role)).then(function () {\n              _this5.$message({\n                message: _this5.$t('tips.createSuccess'),\n                type: 'success'\n              });\n\n              _this5.reset();\n            });\n          }\n        } else {\n          return false;\n        }\n      });\n    },\n    add: function add() {\n      this.resetForm();\n    },\n    sortChange: function sortChange(val) {\n      this.sort.field = val.prop;\n      this.sort.order = val.order;\n      this.search();\n    },\n    reset: function reset() {\n      this.resetForm();\n      this.queryParams = {};\n      this.sort = {};\n      this.$refs.table.clearSort();\n      this.search();\n    },\n    resetForm: function resetForm() {\n      this.$refs.form.clearValidate();\n      this.$refs.form.resetFields();\n      this.role = this.initRole();\n      this.$refs.permsTree.setCheckedKeys([]);\n    },\n    search: function search() {\n      this.resetForm();\n      this.fetch((0, _objectSpread2.default)({}, this.queryParams, {}, this.sort));\n    },\n    fetch: function fetch() {\n      var _this6 = this;\n\n      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.loading = true;\n      params.pageSize = this.pagination.size;\n      params.pageNum = this.pagination.num;\n      this.$get('system/role', (0, _objectSpread2.default)({}, params)).then(function (r) {\n        var data = r.data.data;\n        _this6.list = data.rows;\n        _this6.total = data.total;\n        _this6.loading = false;\n      });\n    }\n  }\n};\nexports.default = _default;",null]}