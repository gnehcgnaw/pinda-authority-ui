{"remainingRequest":"D:\\projects\\beike\\pinda-authority-ui\\node_modules\\babel-loader\\lib\\index.js!D:\\projects\\beike\\pinda-authority-ui\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\projects\\beike\\pinda-authority-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\projects\\beike\\pinda-authority-ui\\src\\views\\febs\\system\\menu\\Index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\projects\\beike\\pinda-authority-ui\\src\\views\\febs\\system\\menu\\Index.vue","mtime":1585207882842},{"path":"D:\\projects\\beike\\pinda-authority-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\projects\\beike\\pinda-authority-ui\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\projects\\beike\\pinda-authority-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\projects\\beike\\pinda-authority-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"D:\\\\projects\\\\beike\\\\pinda-authority-ui\\\\node_modules\\\\@babel\\\\runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _objectSpread2 = _interopRequireDefault(require(\"D:\\\\projects\\\\beike\\\\pinda-authority-ui\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/objectSpread2\"));\n\nvar _Icons = _interopRequireDefault(require(\"./Icons\"));\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar _default = {\n  name: 'MenuManage',\n  components: {\n    Icons: _Icons.default\n  },\n  data: function data() {\n    return {\n      iconVisible: false,\n      selection: [],\n      menuTree: [],\n      menuName: '',\n      menu: this.initMenu(),\n      rules: {\n        menuName: [{\n          required: true,\n          message: this.$t('rules.require'),\n          trigger: 'blur'\n        }, {\n          min: 2,\n          max: 10,\n          message: this.$t('rules.range2to10'),\n          trigger: 'blur'\n        }],\n        path: {\n          max: 100,\n          message: this.$t('rules.noMoreThan100'),\n          trigger: 'blur'\n        },\n        component: {\n          max: 100,\n          message: this.$t('rules.noMoreThan100'),\n          trigger: 'blur'\n        },\n        perms: {\n          max: 50,\n          message: this.$t('rules.noMoreThan50'),\n          trigger: 'blur'\n        }\n      }\n    };\n  },\n  mounted: function mounted() {\n    this.initMenuTree();\n  },\n  methods: {\n    initMenuTree: function initMenuTree() {\n      var _this = this;\n\n      this.$get('system/menu').then(function (r) {\n        _this.menuTree = r.data.data.rows;\n      });\n    },\n    initMenu: function initMenu() {\n      return {\n        menuId: '',\n        menuName: '',\n        parentId: 0,\n        path: '',\n        component: '',\n        perms: '',\n        type: '0',\n        orderNum: 0,\n        icon: ''\n      };\n    },\n    exportExcel: function exportExcel() {\n      this.$download('system/menu/excel', {\n        menuName: this.menuName\n      }, \"menu_\".concat(new Date().getTime(), \".xlsx\"));\n    },\n    filterNode: function filterNode(value, data) {\n      if (!value) return true;\n      return data.label.indexOf(value) !== -1;\n    },\n    nodeClick: function nodeClick(data) {\n      this.menu = (0, _objectSpread2.default)({}, data);\n      this.menu.menuName = this.menu.label;\n      this.menu.menuId = this.menu.id;\n      this.$refs.form.clearValidate();\n    },\n    handleNumChange: function handleNumChange(val) {\n      this.menu.orderNum = val;\n    },\n    chooseIcons: function chooseIcons() {\n      this.iconVisible = true;\n    },\n    chooseIcon: function chooseIcon(icon) {\n      this.menu.icon = icon;\n      this.iconVisible = false;\n    },\n    submit: function submit() {\n      var _this2 = this;\n\n      this.$refs.form.validate(function (valid) {\n        if (valid) {\n          _this2.menu.createTime = _this2.menu.modifyTime = null;\n\n          if (_this2.menu.menuId) {\n            _this2.$put('system/menu', (0, _objectSpread2.default)({}, _this2.menu)).then(function () {\n              _this2.$message({\n                message: _this2.$t('tips.updateSuccess'),\n                type: 'success'\n              });\n\n              _this2.reset();\n            });\n          } else {\n            _this2.$post('system/menu', (0, _objectSpread2.default)({}, _this2.menu)).then(function () {\n              _this2.$message({\n                message: _this2.$t('tips.createSuccess'),\n                type: 'success'\n              });\n\n              _this2.reset();\n            });\n          }\n        } else {\n          return false;\n        }\n      });\n    },\n    reset: function reset() {\n      this.initMenuTree();\n      this.menuName = '';\n      this.resetForm();\n    },\n    search: function search() {\n      this.$refs.menuTree.filter(this.menuName);\n    },\n    add: function add() {\n      this.resetForm();\n      var checked = this.$refs.menuTree.getCheckedKeys();\n\n      if (checked.length > 1) {\n        this.$message({\n          message: this.$t('tips.onlyChooseOne'),\n          type: 'warning'\n        });\n      } else if (checked.length > 0) {\n        this.menu.parentId = checked[0];\n      } else {\n        this.menu.parentId = 0;\n      }\n    },\n    deleteMenu: function deleteMenu() {\n      var _this3 = this;\n\n      var checked = this.$refs.menuTree.getCheckedKeys();\n\n      if (checked.length === 0) {\n        this.$message({\n          message: this.$t('tips.noNodeSelected'),\n          type: 'warning'\n        });\n      } else {\n        this.$confirm(this.$t('tips.confirmDeleteNode'), this.$t('common.tips'), {\n          confirmButtonText: this.$t('common.confirm'),\n          cancelButtonText: this.$t('common.cancel'),\n          type: 'warning'\n        }).then(function () {\n          _this3.menu.menuIds = checked.join(',');\n\n          _this3.$delete(\"system/menu/\".concat(_this3.menu.menuIds)).then(function () {\n            _this3.$message({\n              message: _this3.$t('tips.deleteSuccess'),\n              type: 'success'\n            });\n\n            _this3.reset();\n          });\n        }).catch(function () {\n          _this3.$refs.menuTree.setCheckedKeys([]);\n        });\n      }\n    },\n    resetForm: function resetForm() {\n      this.$refs.form.clearValidate();\n      this.$refs.form.resetFields();\n      this.menu = this.initMenu();\n    }\n  }\n};\nexports.default = _default;",null]}