{"remainingRequest":"D:\\projects\\beike\\pinda-authority-ui\\node_modules\\babel-loader\\lib\\index.js!D:\\projects\\beike\\pinda-authority-ui\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\projects\\beike\\pinda-authority-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\projects\\beike\\pinda-authority-ui\\src\\components\\pinda\\imgUpload.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\projects\\beike\\pinda-authority-ui\\src\\components\\pinda\\imgUpload.vue","mtime":1585207882696},{"path":"D:\\projects\\beike\\pinda-authority-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\projects\\beike\\pinda-authority-ui\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\projects\\beike\\pinda-authority-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\projects\\beike\\pinda-authority-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"D:\\\\projects\\\\beike\\\\pinda-authority-ui\\\\node_modules\\\\@babel\\\\runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nrequire(\"regenerator-runtime/runtime\");\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"D:\\\\projects\\\\beike\\\\pinda-authority-ui\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/asyncToGenerator\"));\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nrequire(\"core-js/modules/es6.function.name\");\n\nrequire(\"core-js/modules/es6.number.constructor\");\n\nvar _localstorage = _interopRequireDefault(require(\"@/utils/localstorage\"));\n\nvar _Common = _interopRequireDefault(require(\"@/api/Common.js\"));\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar _default2 = {\n  props: {\n    uploadRef: {\n      type: String,\n      default: 'file1'\n    },\n    // 是否多选\n    multiple: {\n      type: Boolean,\n      default: false\n    },\n    // 是否自动上传\n    autoUpload: {\n      type: Boolean,\n      default: false\n    },\n    // 是否显示上传列表\n    showFileList: {\n      type: Boolean,\n      default: true\n    },\n    // 最大允许上传个数\n    limit: {\n      type: Number,\n      default: null\n    },\n    // 允许上传的文件类型\n    accept: {\n      type: String,\n      default: 'image/jpeg, image/gif, image/png, image/bmp'\n    },\n    // 允许上传的文件大小 单位：字节\n    acceptSize: {\n      type: Number,\n      default: null\n    },\n    // 默认额外上传数据\n    fileOtherData: {\n      type: Object,\n      default: function _default() {\n        return {\n          bizId: '',\n          bizType: '',\n          isSingle: false\n        };\n      }\n    }\n  },\n  data: function data() {\n    return {\n      imageUrl: '',\n      dialogImageUrl: '',\n      dialogVisible: false,\n      disabled: true,\n      // 默认附件列表\n      imgFileList: [],\n      // 删除附件列表\n      removeFileAry: [],\n      // 新增附件列表\n      addFileAry: [],\n      // 是否上传失败\n      isUploadError: false,\n      fileLength: 0,\n      action: \"\".concat(process.env.VUE_APP_BASE_API, \"/file/attachment/upload\")\n    };\n  },\n  computed: {\n    showUploadBtn: function showUploadBtn() {\n      return this.showFileList && this.addFileAry.length + this.imgFileList.length === this.limit;\n    },\n    headers: function headers() {\n      return {\n        token: _localstorage.default.get('TOKEN', ''),\n        tenant: _localstorage.default.get('TENANT', '')\n      };\n    }\n  },\n  methods: {\n    // 附件初始化\n    init: function init(_ref) {\n      var bizId = _ref.bizId,\n          bizType = _ref.bizType,\n          imageUrl = _ref.imageUrl,\n          isSingle = _ref.isSingle,\n          isDetail = _ref.isDetail;\n      var vm = this;\n      vm.fileOtherData.bizId = bizId;\n      vm.fileOtherData.bizType = bizType;\n      vm.fileOtherData.isSingle = isSingle || false; // vm.imgFileList = []\n\n      vm.imgFileList.length = 0;\n      vm.removeFileAry = [];\n      vm.addFileAry = [];\n      vm.imageUrl = imageUrl;\n      vm.isUploadError = false;\n\n      if (isDetail) {\n        vm.getAttachment();\n      }\n    },\n    // 附件上传前触发\n    beforeUpload: function beforeUpload() {\n      var vm = this;\n      vm.$store.state.hasLoading = true;\n    },\n    // 文件状态改变时的钩子，添加文件、上传成功和上传失败时都会被调用\n    handleChange: function handleChange(file, fileList) {\n      var vm = this;\n\n      if (file.response) {\n        if (file.response.isSuccess) {\n          var remoteFile = file.response.data;\n          vm.fileOtherData.bizId = remoteFile.bizId;\n          vm.imageUrl = remoteFile.url;\n          vm.$emit('setId', remoteFile.bizId, remoteFile.url);\n        } else {\n          vm.$message.error(file.response.msg);\n          vm.isUploadError = false;\n        }\n      } else {\n        if (vm.acceptSize) {\n          var isLtAcceptSize = file.size > vm.acceptSize;\n\n          if (isLtAcceptSize) {\n            setTimeout(function () {\n              vm.$message.error('只能上传' + vm.renderSize(vm.acceptSize) + '的文件!已为您过滤文件：' + file.name);\n            }, 10);\n            fileList.forEach(function (item, index) {\n              if (item.uid === file.uid) {\n                fileList.splice(index, 1);\n              }\n            });\n          } else {\n            if (!vm.isUploadError) {\n              vm.addFileAry.push(file.name);\n            }\n\n            vm.isUploadError = false;\n          }\n        }\n      }\n\n      vm.$store.state.hasLoading = false;\n    },\n    renderSize: function renderSize(value) {\n      if (null == value || value == '') {\n        return '0 B';\n      }\n\n      var unitArr = new Array('B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB');\n      var index = 0;\n      var srcsize = parseFloat(value);\n      index = Math.floor(Math.log(srcsize) / Math.log(1024));\n      var size = srcsize / Math.pow(1024, index);\n      size = size.toFixed(2);\n\n      if (unitArr[index]) {\n        return size + unitArr[index];\n      }\n\n      return '文件太大';\n    },\n    // 附件上传失败\n    handleError: function handleError() {\n      var vm = this;\n      vm.$message.error('附件上传失败，请重试');\n      vm.isUploadError = true;\n      vm.$store.state.hasLoading = false;\n\n      if (!vm.showFileList) {\n        vm.imageUrl = '';\n      }\n    },\n    // 查询附件\n    getAttachment: function () {\n      var _getAttachment = (0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var vm, res, data;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                vm = this;\n                _context.next = 3;\n                return _Common.default.getAttachment({\n                  bizIds: vm.fileOtherData.bizId,\n                  bizTypes: vm.fileOtherData.bizType\n                });\n\n              case 3:\n                res = _context.sent;\n\n                if (res.status === 200) {\n                  if (res.data.code === 0) {\n                    if (res.data.data.length > 0) {\n                      data = res.data.data[0].list;\n                      data.map(function (item) {\n                        item.name = item.submittedFileName;\n\n                        if (!vm.showFileList) {\n                          vm.imageUrl = item.url;\n                        }\n                      });\n                      vm.imgFileList = data;\n                      vm.$emit('fileLengthVaild', vm.imgFileList.length);\n                    }\n                  }\n                }\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getAttachment() {\n        return _getAttachment.apply(this, arguments);\n      }\n\n      return getAttachment;\n    }(),\n    // 删除附件回调\n    handleRemove: function handleRemove(file) {\n      var vm = this;\n\n      if (file.bizId) {\n        vm.removeFileAry.push(file.id);\n        vm.imgFileList.map(function (item, index) {\n          if (item.bizId === file.bizId) {\n            vm.imgFileList.splice(index, 1);\n            return false;\n          }\n        });\n      } else {\n        vm.addFileAry.map(function (item, index) {\n          if (item === file.name) {\n            vm.addFileAry.splice(index, 1);\n            return false;\n          }\n        });\n      }\n    },\n    // 文件超出个数限制时的钩子\n    handleExceed: function handleExceed() {\n      var vm = this;\n      vm.$message('当前最多允许上传' + vm.limit + '张图片');\n    },\n    // 返回附件新增及删除数组长度\n    handleBack: function handleBack() {\n      var vm = this;\n      return {\n        addLength: vm.addFileAry.length,\n        removeLength: vm.removeFileAry.length\n      };\n    },\n    // 服务器删除附件\n    deleteAttachment: function () {\n      var _deleteAttachment = (0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        var vm, res;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                vm = this;\n                _context2.next = 3;\n                return _Common.default.deleteAttachment({\n                  ids: vm.removeFileAry\n                });\n\n              case 3:\n                res = _context2.sent;\n\n                if (res.status === 200) {\n                  if (res.data.code !== 0) {\n                    vm.$message(res.data.msg);\n                  }\n                }\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function deleteAttachment() {\n        return _deleteAttachment.apply(this, arguments);\n      }\n\n      return deleteAttachment;\n    }(),\n    // 附件上传服务器触发方法\n    submitFile: function submitFile(bizId, bizType, isSingle) {\n      var vm = this;\n      vm.fileOtherData.bizId = bizId;\n      vm.fileOtherData.bizType = bizType;\n      vm.fileOtherData.isSingle = isSingle;\n\n      if (!vm.showFileList) {\n        var length = vm.$refs[vm.uploadRef].uploadFiles.length - 1;\n        vm.$refs[vm.uploadRef].uploadFiles = [vm.$refs[vm.uploadRef].uploadFiles[length]];\n        vm.imgFileList.map(function (item) {\n          vm.removeFileAry.push(item.id);\n        });\n\n        if (vm.imgFileList.length > 0) {\n          vm.deleteAttachment();\n        }\n      }\n\n      vm.$refs[vm.uploadRef].submit();\n      vm.$store.state.hasLoading = false;\n      vm.addFileAry = [];\n    },\n    // 服务器删除附件\n    deleteAttachmentByIds: function () {\n      var _deleteAttachmentByIds = (0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(ids) {\n        var vm, res;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                vm = this;\n                _context3.next = 3;\n                return _Common.default.deleteAttachment({\n                  ids: ids\n                });\n\n              case 3:\n                res = _context3.sent;\n\n                if (res.status === 200) {\n                  if (res.data.code !== 0) {\n                    vm.$message(res.data.msg);\n                  } else {\n                    vm.removeFileAry = [];\n                  }\n                }\n\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function deleteAttachmentByIds(_x) {\n        return _deleteAttachmentByIds.apply(this, arguments);\n      }\n\n      return deleteAttachmentByIds;\n    }()\n  }\n};\nexports.default = _default2;",null]}