{"remainingRequest":"D:\\projects\\beike\\pinda-authority-ui\\node_modules\\babel-loader\\lib\\index.js!D:\\projects\\beike\\pinda-authority-ui\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\projects\\beike\\pinda-authority-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\projects\\beike\\pinda-authority-ui\\src\\views\\login\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\projects\\beike\\pinda-authority-ui\\src\\views\\login\\index.vue","mtime":1585211796606},{"path":"D:\\projects\\beike\\pinda-authority-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\projects\\beike\\pinda-authority-ui\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\projects\\beike\\pinda-authority-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\projects\\beike\\pinda-authority-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"D:\\\\projects\\\\beike\\\\pinda-authority-ui\\\\node_modules\\\\@babel\\\\runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _objectSpread2 = _interopRequireDefault(require(\"D:\\\\projects\\\\beike\\\\pinda-authority-ui\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/objectSpread2\"));\n\nrequire(\"core-js/modules/es6.function.name\");\n\nrequire(\"core-js/modules/es6.regexp.to-string\");\n\nrequire(\"core-js/modules/es6.typed.uint8-array\");\n\nvar _localstorage = _interopRequireDefault(require(\"@/utils/localstorage\"));\n\nvar _utils = require(\"@/utils\");\n\nvar _settings = require(\"@/settings\");\n\nvar _Login = _interopRequireDefault(require(\"@/api/Login.js\"));\n\nvar _Common = _interopRequireDefault(require(\"@/api/Common.js\"));\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar _default = {\n  name: 'Login',\n  data: function data() {\n    return {\n      //是否启用多租户\n      isMultiTenant: process.env.VUE_APP_IS_MULTI_TENANT === 'true' ? true : false,\n      tabActiveName: 'bindLogin',\n      login: {\n        type: 'up'\n      },\n      logo: [{\n        img: 'gitee.png',\n        name: 'gitee',\n        radius: true\n      }, {\n        img: 'github.png',\n        name: 'github',\n        radius: true\n      }, {\n        img: 'tencent_cloud.png',\n        name: 'tencent_cloud',\n        radius: true\n      }, {\n        img: 'qq.png',\n        name: 'qq',\n        radius: false\n      }, {\n        img: 'dingtalk.png',\n        name: 'dingtalk',\n        radius: true\n      }, {\n        img: 'microsoft.png',\n        name: 'microsoft',\n        radius: false\n      }],\n      loginForm: {\n        account: '',\n        password: '',\n        tenant: '0000',\n        bindAccount: '',\n        bindPassword: '',\n        signAccount: '',\n        signPassword: ''\n      },\n      rules: {\n        account: {\n          required: true,\n          message: this.$t('rules.require'),\n          trigger: 'blur'\n        },\n        tenant: {\n          required: true,\n          message: this.$t('rules.require'),\n          trigger: 'blur'\n        },\n        password: {\n          required: true,\n          message: this.$t('rules.require'),\n          trigger: 'blur'\n        },\n        code: {\n          required: true,\n          message: this.$t('rules.require'),\n          trigger: 'blur'\n        },\n        bindAccount: {\n          required: true,\n          message: this.$t('rules.require'),\n          trigger: 'blur'\n        },\n        bindPassword: {\n          required: true,\n          message: this.$t('rules.require'),\n          trigger: 'blur'\n        },\n        signAccount: [{\n          required: true,\n          message: this.$t('rules.require'),\n          trigger: 'blur'\n        }, {\n          min: 4,\n          max: 10,\n          message: this.$t('rules.range4to10'),\n          trigger: 'blur'\n        }],\n        signPassword: [{\n          required: true,\n          message: this.$t('rules.require'),\n          trigger: 'blur'\n        }, {\n          min: 6,\n          max: 20,\n          message: this.$t('rules.range6to20'),\n          trigger: 'blur'\n        }]\n      },\n      authUser: null,\n      loading: false,\n      showDialog: false,\n      redirect: undefined,\n      otherQuery: {},\n      randomId: (0, _utils.randomNum)(24, 16),\n      imageCode: '',\n      page: {\n        width: window.screen.width * 0.5,\n        height: window.screen.height * 0.5\n      }\n    };\n  },\n  created: function created() {},\n  mounted: function mounted() {\n    _localstorage.default.clear();\n\n    this.getCodeImage();\n  },\n  destroyed: function destroyed() {\n    window.removeEventListener('message', this.resolveSocialLogin);\n  },\n  methods: {\n    getCodeImage: function getCodeImage() {\n      var _this = this;\n\n      _Login.default.getCaptcha(this.randomId).then(function (response) {\n        var res = response.data;\n\n        if (res.byteLength <= 100) {\n          _this.$message({\n            message: _this.$t('tips.systemError'),\n            type: 'error'\n          });\n        }\n\n        return 'data:image/png;base64,' + btoa(new Uint8Array(res).reduce(function (data, byte) {\n          return data + String.fromCharCode(byte);\n        }, ''));\n      }).then(function (res) {\n        _this.imageCode = res;\n      }).catch(function (e) {\n        if (e.toString().indexOf('429') !== -1) {\n          _this.$message({\n            message: _this.$t('tips.tooManyRequest'),\n            type: 'error'\n          });\n        } else {\n          _this.$message({\n            message: _this.$t('tips.getCodeImageFailed'),\n            type: 'error'\n          });\n        }\n      });\n    },\n    handleTabClick: function handleTabClick(tab) {\n      this.tabActiveName = tab.name;\n    },\n    resolveLogo: function resolveLogo(logo) {\n      return require(\"@/assets/logo/\".concat(logo));\n    },\n    socialLogin: function socialLogin(oauthType) {\n      var url = \"\".concat(_settings.socialLoginUrl, \"/\").concat(oauthType, \"/login\");\n      window.open(url, 'newWindow', \"resizable=yes, height=\".concat(this.page.height, \", width=\").concat(this.page.width, \", top=10%, left=10%, toolbar=no, menubar=no, scrollbars=no, resizable=no,location=no, status=no\"));\n      window.addEventListener('message', this.resolveSocialLogin, false);\n    },\n    resolveSocialLogin: function resolveSocialLogin(e) {\n      var data = e.data;\n      var that = this;\n\n      if (data.message === 'not_bind') {\n        that.login.type = 'bind';\n        var authUser = data.data;\n        that.authUser = authUser;\n        that.$confirm(that.$t('common.current') + authUser.source + that.$t('common.socialAccount') + authUser.nickname + that.$t('common.socialTips'), that.$t('common.tips'), {\n          confirmButtonText: that.$t('common.signLogin'),\n          cancelButtonText: that.$t('common.bindLogin'),\n          type: 'warning'\n        }).then(function () {\n          that.tabActiveName = 'signLogin';\n        }).catch(function () {\n          that.tabActiveName = 'bindLogin';\n        });\n      } else if (data.message === 'social_login_success') {\n        that.saveLoginData(data.data);\n        that.getUserDetailInfo();\n        that.loginSuccessCallback(data.account);\n      } else {// do nothing\n      }\n    },\n    bindLogin: function bindLogin() {\n      var _this2 = this;\n\n      var account_c = false;\n      var password_c = false;\n      this.$refs.loginForm.validateField('bindAccount', function (e) {\n        if (!e) {\n          account_c = true;\n        }\n      });\n      this.$refs.loginForm.validateField('bindPassword', function (e) {\n        if (!e) {\n          password_c = true;\n        }\n      });\n\n      if (account_c && password_c) {\n        this.loading = true;\n        var that = this;\n        var params = (0, _objectSpread2.default)({\n          bindAccount: that.loginForm.bindAccount,\n          bindPassword: that.loginForm.bindPassword\n        }, that.authUser);\n        params.token = null;\n        that.$post('auth/social/bind/login', params).then(function (r) {\n          var data = r.data.data;\n\n          _this2.saveLoginData(data);\n\n          _this2.getUserDetailInfo();\n\n          _this2.loginSuccessCallback(that.loginForm.bindAccount);\n        }).catch(function (error) {\n          console.error(error);\n          that.loading = false;\n        });\n      }\n    },\n    signLogin: function signLogin() {\n      var _this3 = this;\n\n      var account_c = false;\n      var password_c = false;\n      this.$refs.loginForm.validateField('signAccount', function (e) {\n        if (!e) {\n          account_c = true;\n        }\n      });\n      this.$refs.loginForm.validateField('signPassword', function (e) {\n        if (!e) {\n          password_c = true;\n        }\n      });\n\n      if (account_c && password_c) {\n        this.loading = true;\n        var that = this;\n        var params = (0, _objectSpread2.default)({\n          bindAccount: that.loginForm.signAccount,\n          bindPassword: that.loginForm.signPassword\n        }, that.authUser);\n        params.token = null;\n        that.$post('auth/social/sign/login', params).then(function (r) {\n          var data = r.data.data;\n\n          _this3.saveLoginData(data);\n\n          _this3.getUserDetailInfo();\n\n          _this3.loginSuccessCallback(that.loginForm.signAccount);\n        }).catch(function (error) {\n          console.error(error);\n          that.loading = false;\n        });\n      }\n    },\n    handleLogin: function handleLogin() {\n      var _this4 = this;\n\n      var account_c = false;\n      var password_c = false;\n      var tenant_c = false;\n      var code_c = false;\n      this.$refs.loginForm.validateField('tenant', function (e) {\n        if (!e) {\n          tenant_c = true;\n        }\n      });\n      this.$refs.loginForm.validateField('account', function (e) {\n        if (!e) {\n          account_c = true;\n        }\n      });\n      this.$refs.loginForm.validateField('password', function (e) {\n        if (!e) {\n          password_c = true;\n        }\n      });\n      this.$refs.loginForm.validateField('code', function (e) {\n        if (!e) {\n          code_c = true;\n        }\n      });\n\n      if (account_c && password_c && code_c && tenant_c) {\n        this.loading = true;\n        var that = this;\n        that.loginForm['key'] = that.randomId;\n\n        _Login.default.login(this.loginForm).then(function (response) {\n          var res = response.data; //debugger;\n\n          if (res.isSuccess) {\n            that.saveLoginData(res.data.token);\n            that.saveUserInfo(res.data.user, res.data.permissionsList);\n            that.loginSuccessCallback(res.data.user);\n\n            _Login.default.loginLog(res.data.user.account, _this4.$t('tips.loginSuccess'));\n\n            that.$message({\n              message: _this4.$t('tips.loginSuccess'),\n              type: 'success'\n            });\n            that.loading = false;\n            that.$router.push('/');\n          } else {\n            that.loading = false;\n            that.getCodeImage();\n\n            _this4.$store.commit('account/setTenant', _this4.loginForm.tenant);\n\n            _Login.default.loginLog(that.loginForm.account, res.msg);\n          }\n        });\n      }\n    },\n    saveLoginData: function saveLoginData(token) {\n      this.$store.commit('account/setTenant', this.loginForm.tenant);\n      this.$store.commit('account/setToken', token.token);\n      var current = new Date();\n      var expireTime = current.setTime(current.getTime() + 1000 * token.expire);\n      this.$store.commit('account/setExpireTime', expireTime);\n    },\n    saveUserInfo: function saveUserInfo(user, permissionsList) {\n      this.$store.commit('account/setUser', user); // TODO 从后台拉取权限列表\n      // const permissions = [\n      //   \"org:view\",\n      //   \"org:add\",\n      //   \"org:update\",\n      //   \"org:delete\",\n      //   \"org:export\",\n      //   \"user:view\",\n      //   \"user:add\",\n      //   \"user:update\",\n      //   \"user:delete\",\n      //   \"user:reset\",\n      //   \"user:export\",\n      //   \"station:view\",\n      //   \"station:add\",\n      //   \"station:update\",\n      //   \"station:delete\",\n      //   \"station:export\",\n      //   \"menu:view\",\n      //   \"menu:add\",\n      //   \"menu:update\",\n      //   \"menu:delete\",\n      //   \"menu:export\",\n      //   \"resource:view\",\n      //   \"resource:add\",\n      //   \"resource:update\",\n      //   \"resource:delete\",\n      //   \"resource:export\",\n      //   \"role:view\",\n      //   \"role:add\",\n      //   \"role:update\",\n      //   \"role:delete\",\n      //   \"role:export\",\n      //   \"role:auth\",\n      //   \"role:config\",\n      //   \"client:view\",\n      //   \"client:add\",\n      //   \"client:decrypt\",\n      //   \"log:view\",\n      //   \"log:export\",\n      //   \"monitor:loginlog\",\n      //   \"loginlog:export\",\n      //   \"monitor:register\",\n      //   \"monitor:zipkin\",\n      //   \"monitor:kibana\",\n      //   \"mobitor:admin\",\n      //   \"monitor:swagger\",\n      //   \"grafana:view\",\n      //   \"gen:config\",\n      //   \"gen:generate\",\n      //   \"gen:generate:gen\",\n      //   \"others:eximport\"\n      // ]\n\n      this.$store.commit('account/setPermissions', permissionsList);\n    },\n    loginSuccessCallback: function loginSuccessCallback(user) {\n      var _this5 = this;\n\n      console.log(user);\n      return; // 登录成功后的回调，记录登录日志，最后登录时间等\n      // this.$get(`system/user/success/${account}`).catch((e) => { console.log(e) })\n\n      _Common.default.dictionaryEnums().then(function (response) {\n        var res = response.data;\n\n        if (res.isSuccess) {\n          _this5.$store.commit('common/setEnums', res.data);\n        }\n      });\n    }\n  }\n};\nexports.default = _default;",null]}