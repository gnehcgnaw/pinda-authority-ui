{"remainingRequest":"D:\\品达通用权限系统\\资料\\前端工程\\pinda-authority-ui\\node_modules\\babel-loader\\lib\\index.js!D:\\品达通用权限系统\\资料\\前端工程\\pinda-authority-ui\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\品达通用权限系统\\资料\\前端工程\\pinda-authority-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\品达通用权限系统\\资料\\前端工程\\pinda-authority-ui\\src\\views\\pinda\\sms\\manage\\Edit.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\品达通用权限系统\\资料\\前端工程\\pinda-authority-ui\\src\\views\\pinda\\sms\\manage\\Edit.vue","mtime":1585207882910},{"path":"D:\\品达通用权限系统\\资料\\前端工程\\pinda-authority-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\品达通用权限系统\\资料\\前端工程\\pinda-authority-ui\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\品达通用权限系统\\资料\\前端工程\\pinda-authority-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\品达通用权限系统\\资料\\前端工程\\pinda-authority-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"D:\\\\\\u54C1\\u8FBE\\u901A\\u7528\\u6743\\u9650\\u7CFB\\u7EDF\\\\\\u8D44\\u6599\\\\\\u524D\\u7AEF\\u5DE5\\u7A0B\\\\pinda-authority-ui\\\\node_modules\\\\@babel\\\\runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nrequire(\"core-js/modules/es6.object.keys\");\n\nrequire(\"core-js/modules/es6.regexp.replace\");\n\nvar _createForOfIteratorHelper2 = _interopRequireDefault(require(\"D:\\\\\\u54C1\\u8FBE\\u901A\\u7528\\u6743\\u9650\\u7CFB\\u7EDF\\\\\\u8D44\\u6599\\\\\\u524D\\u7AEF\\u5DE5\\u7A0B\\\\pinda-authority-ui\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/createForOfIteratorHelper\"));\n\nrequire(\"core-js/modules/es6.array.find\");\n\nrequire(\"core-js/modules/es6.regexp.split\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"D:\\\\\\u54C1\\u8FBE\\u901A\\u7528\\u6743\\u9650\\u7CFB\\u7EDF\\\\\\u8D44\\u6599\\\\\\u524D\\u7AEF\\u5DE5\\u7A0B\\\\pinda-authority-ui\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/objectSpread2\"));\n\nrequire(\"regenerator-runtime/runtime\");\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"D:\\\\\\u54C1\\u8FBE\\u901A\\u7528\\u6743\\u9650\\u7CFB\\u7EDF\\\\\\u8D44\\u6599\\\\\\u524D\\u7AEF\\u5DE5\\u7A0B\\\\pinda-authority-ui\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/asyncToGenerator\"));\n\nvar _SmsTemplate = _interopRequireDefault(require(\"@/api/SmsTemplate.js\"));\n\nvar _SmsTask = _interopRequireDefault(require(\"@/api/SmsTask.js\"));\n\nvar _myValidate = require(\"@/utils/my-validate\");\n\nvar _SendStatusIndex = _interopRequireDefault(require(\"./SendStatusIndex\"));\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar _default = {\n  name: 'SmsTaskEdit',\n  components: {\n    SendStatusIndex: _SendStatusIndex.default\n  },\n  filters: {\n    statusFilter: function statusFilter(status) {\n      var map = {\n        WAITING: 'danger',\n        SUCCESS: 'success',\n        FAIL: 'error'\n      };\n      return map[status] || 'success';\n    }\n  },\n  props: {},\n  data: function data() {\n    var _this = this;\n\n    return {\n      dialog: {\n        isVisible: false\n      },\n      type: 'add',\n      smsTask: this.initSmsTask(),\n      smsTemplateList: [],\n      receiverList: [],\n      receiverVisible: false,\n      receiver: '',\n      timing: false,\n      disabled: false,\n      smsTemplate: '',\n      content: '',\n      rules: {\n        topic: [{\n          required: true,\n          message: this.$t('rules.require'),\n          trigger: 'blur'\n        }, {\n          min: 1,\n          max: 255,\n          message: this.$t('rules.range4to10'),\n          trigger: 'blur'\n        }],\n        templateId: {\n          required: true,\n          message: this.$t('rules.require'),\n          trigger: 'blur'\n        },\n        sendTime: {\n          validator: function validator(rule, value, callback) {\n            var vm = _this;\n\n            if (vm.timing) {\n              if (vm.smsTask.sendTime) {\n                callback();\n              } else {\n                callback('请选择发送日期');\n              }\n            } else {\n              callback();\n            }\n          },\n          trigger: 'change'\n        }\n      },\n      pickerOptions: {\n        shortcuts: [{\n          text: '一小时后',\n          onClick: function onClick(picker) {\n            var date = new Date();\n            date.setTime(date.getTime() + 3600 * 1000 * 1);\n            picker.$emit('pick', date);\n          }\n        }, {\n          text: '明天',\n          onClick: function onClick(picker) {\n            var date = new Date();\n            date.setTime(date.getTime() + 3600 * 1000 * 24);\n            picker.$emit('pick', date);\n          }\n        }, {\n          text: '一周后',\n          onClick: function onClick(picker) {\n            var date = new Date();\n            date.setTime(date.getTime() + 3600 * 1000 * 24 * 7);\n            picker.$emit('pick', date);\n          }\n        }]\n      }\n    };\n  },\n  computed: {},\n  watch: {\n    $route: function $route() {\n      if (this.$route.path === '/sms/manage') {\n        this.initSmsTemplateList();\n        this.loadSendStatus();\n      }\n    }\n  },\n  mounted: function mounted() {\n    //在vue的mount阶段执行的函数都是顺序执行，不会阻塞的，所以如果希望mount阶段的函数也是阻塞的，需要额外写一个async函数，然后把需要同步执行的函数写到里面，然后在mount阶段调用这个额外写的函数\n    this.initSmsTemplateList();\n    this.loadSendStatus();\n  },\n  methods: {\n    loadSendStatus: function loadSendStatus() {\n      var type = this.$route.query.type;\n      var id = this.$route.query.id;\n\n      if (type === 'view') {\n        this.$refs.statusList.setTaskId(id);\n      }\n    },\n    loadSmsTask: function () {\n      var _loadSmsTask = (0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var _this2 = this;\n\n        var type, id;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                type = this.$route.query.type;\n                id = this.$route.query.id;\n                this.type = type;\n\n                if (type) {\n                  // 切换到别的页面时，无需重置表单\n                  // this.smsTask = this.initSmsTask()\n                  this.reset();\n                }\n\n                if (type === 'view') {\n                  this.disabled = true;\n                } else {\n                  this.disabled = false;\n                }\n\n                if (!id) {\n                  _context.next = 8;\n                  break;\n                }\n\n                _context.next = 8;\n                return _SmsTask.default.get(id).then(function (response) {\n                  var res = response.data;\n                  _this2.smsTask = (0, _objectSpread2.default)({}, _this2.smsTask, {}, res.data);\n\n                  if (type !== 'edit') {\n                    _this2.smsTask.id = '';\n                  }\n\n                  _this2.changeTemplate(_this2.smsTask.templateId);\n\n                  _this2.receiverList = _this2.smsTask.receiver.split(',');\n\n                  if (_this2.smsTask.templateParams) {\n                    _this2.smsTask.templateParam = JSON.parse(_this2.smsTask.templateParams);\n                  }\n\n                  _this2.smsTask.content = res.data.content;\n                  console.log('查询');\n\n                  if (_this2.smsTask.sendTime) {\n                    _this2.timing = true;\n                  } else {\n                    _this2.timing = false;\n                  }\n\n                  _this2.smsTemplate = _this2.smsTemplateList.find(function (item) {\n                    return item.id === _this2.smsTask.templateId;\n                  });\n                });\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function loadSmsTask() {\n        return _loadSmsTask.apply(this, arguments);\n      }\n\n      return loadSmsTask;\n    }(),\n    changeTemplate: function changeTemplate(id) {\n      var vm = this; // vm.preSearch()\n\n      if (id) {\n        //遍历模板添加文本框\n        var _iterator = (0, _createForOfIteratorHelper2.default)(vm.smsTemplateList),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var item = _step.value;\n\n            if (item.id === id) {\n              var templateParam = {};\n\n              if (typeof item.templateParams == 'string') {\n                templateParam = JSON.parse(item.templateParams);\n              } else {\n                templateParam = item.templateParams;\n              }\n\n              for (var prop in templateParam) {\n                templateParam[prop] = '';\n              }\n\n              vm.smsTemplate = item;\n\n              if (vm.type !== 'view') {\n                console.log('赋值');\n                vm.smsTask.templateParam = templateParam; // vm.smsTask.content = item.content\n\n                this.content = item.content;\n              }\n\n              break;\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        vm.changeContent();\n      }\n    },\n    //模板文本框输入内容\n    templateCode: function templateCode(val, key) {\n      var vm = this;\n      vm.smsTask.templateParam[key] = val;\n      vm.changeContent();\n    },\n    //短信内容处理\n    changeContent: function changeContent() {\n      var vm = this;\n\n      if (!vm.smsTemplate) {\n        return;\n      }\n\n      var type = vm.smsTemplate.providerType.code;\n      var content = vm.smsTemplate.content;\n\n      for (var key in vm.smsTask.templateParam) {\n        var strs = '';\n\n        if (type == 'TENCENT') {\n          strs = '{' + key + '}';\n        } else {\n          strs = '${' + key + '}';\n        }\n\n        if (vm.smsTask.templateParam[key]) {\n          content = content.replace(strs, vm.smsTask.templateParam[key]);\n        }\n      }\n\n      if (vm.type !== 'view') {\n        console.log('赋值');\n        vm.smsTask.content = content;\n      }\n    },\n    initSmsTemplateList: function () {\n      var _initSmsTemplateList = (0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        var _this3 = this;\n\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return _SmsTemplate.default.page({\n                  current: 1,\n                  size: 10000\n                }).then(function (response) {\n                  var res = response.data;\n\n                  if (res.isSuccess) {\n                    _this3.smsTemplateList = res.data.records;\n                  }\n\n                  console.log('list 加载');\n                });\n\n              case 2:\n                _context2.next = 4;\n                return this.loadSmsTask();\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function initSmsTemplateList() {\n        return _initSmsTemplateList.apply(this, arguments);\n      }\n\n      return initSmsTemplateList;\n    }(),\n    initSmsTask: function initSmsTask() {\n      return {\n        templateId: '',\n        receiver: '',\n        topic: '',\n        templateParam: {},\n        sendTime: null,\n        content: '',\n        draft: false,\n        status: {\n          code: '',\n          desc: ''\n        }\n      };\n    },\n    reset: function reset() {\n      // 先清除校验，再清除表单，不然有奇怪的bug\n      this.$refs.form.clearValidate();\n      this.$refs.form.resetFields();\n      this.smsTask = this.initSmsTask();\n      this.receiverList = [];\n    },\n    submitForm: function submitForm(draft) {\n      var vm = this;\n\n      if (vm.smsTask.templateParam && Object.keys(vm.smsTask.templateParam).length > 0) {\n        var flag = false;\n\n        for (var key in vm.smsTask.templateParam) {\n          if (!vm.smsTask.templateParam[key]) {\n            flag = true;\n            break;\n          }\n        }\n\n        if (flag) {\n          vm.$message({\n            message: '发送内容不能为空',\n            type: 'error'\n          });\n          return;\n        }\n      } else {\n        vm.$message({\n          message: '发送内容不能为空',\n          type: 'error'\n        });\n        return;\n      }\n\n      this.$refs.form.validate(function (valid) {\n        if (valid) {\n          vm.editSubmit(draft);\n        } else {\n          return false;\n        }\n      });\n    },\n    editSubmit: function editSubmit(draft) {\n      var vm = this;\n      vm.smsTask.draft = draft;\n      vm.smsTask.receiver = vm.receiverList.join(',');\n\n      if (!vm.timing) {\n        vm.smsTask.sendTime = null;\n      }\n\n      if (vm.type === 'edit') {\n        vm.update();\n      } else {\n        vm.save();\n      }\n    },\n    save: function save() {\n      var vm = this;\n      vm.disabled = true;\n\n      _SmsTask.default.save(vm.smsTask).then(function (response) {\n        vm.disabled = false;\n        var res = response.data;\n\n        if (res.isSuccess) {\n          vm.$message({\n            message: vm.$t('tips.createSuccess'),\n            type: 'success'\n          });\n          vm.reset();\n          vm.$router.push('/sms/manage');\n        }\n      });\n    },\n    update: function update() {\n      var vm = this;\n      vm.disabled = true;\n\n      _SmsTask.default.update(vm.smsTask).then(function (response) {\n        vm.disabled = false;\n        var res = response.data;\n\n        if (res.isSuccess) {\n          vm.$message({\n            message: vm.$t('tips.createSuccess'),\n            type: 'success'\n          });\n          vm.reset();\n          vm.$router.push('/sms/manage');\n        }\n      });\n    },\n    handleClose: function handleClose(tag) {\n      this.receiverList.splice(this.receiverList.indexOf(tag), 1);\n    },\n    showInput: function showInput() {\n      var _this4 = this;\n\n      this.receiverVisible = true;\n      this.$nextTick(function () {\n        _this4.$refs.saveTagInput.$refs.input.focus();\n      });\n    },\n    handleInputConfirm: function handleInputConfirm() {\n      var vm = this; // 正则校验\n\n      var inputValue = vm.receiver;\n\n      if (inputValue) {\n        if (!(0, _myValidate.validMobile)(inputValue)) {\n          this.$message({\n            message: '该手机号不合法',\n            type: 'error'\n          });\n          vm.$refs.saveTagInput.focus();\n          return;\n        }\n\n        if (this.receiverList.indexOf(inputValue) === -1) {\n          vm.receiverList.push(inputValue);\n          vm.receiverVisible = false;\n          vm.receiver = '';\n        } else {\n          this.$message({\n            message: '该账号已经存在',\n            type: 'error'\n          });\n          vm.$refs.saveTagInput.focus();\n        }\n      } else {\n        this.receiverVisible = false;\n      }\n    }\n  }\n};\nexports.default = _default;",null]}